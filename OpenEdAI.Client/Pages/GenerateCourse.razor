@page "/generate-course"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using OpenEdAI.Client.Models
@using OpenEdAI.Client.Services
@using OpenEdAI.Client.Components
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject LoadingService Loader
@inject IJSRuntime JS
@inject LogoutService LogoutService

<!-- Prevent navigation if required fields are not completed -->
<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="ConfirmNavigationAsync" />

<div class="generate-course-container">
	<h2>Create Your Custom Learning Path</h2>
	<p class="intro-text">
		Welcome to the Course Generator! Based on your preferences, we'll use AI to create a personalized course outline!
	</p>

	

	@if (generatedPlan != null)
	{
		<CoursePlanDisplay Plan="generatedPlan" IsFinalized="@isFinalized" />

		<button class="btn btn-success send-button" @onclick="SubmitCoursePlan">Choose this course plan</button>

		<CoursePlanChat Messages="chatMessages" OnUserMessageSent="HandleUserChatMessage" />
	}
	else
	{
		<CourseInput OnGenerate="HandleCourseInput" />
	}
</div>


@code {
	private CoursePlanDTO generatedPlan;
	private bool isFinalized = false;
	private List<CoursePlanChat.ChatMessage> chatMessages = new();
	private bool isLoggingOut = false;

	// Constant strings for local storage keys to persist data
	private const string PlanStorageKey = "cached_generated_plan";
	private const string ChatMessagesKey = "cached_chat_messages";

	protected override async Task OnInitializedAsync()
	{
		await LoadGeneratedPlanAsync();
		await LoadChatMessagesAsync();
	}

	private async Task HandleCourseInput(CoursePersonalizationInput input)
	{
		try
		{
			Loader.Show();

			var response = await Http.PostAsJsonAsync("ai/generate-course", input);

			if (response.IsSuccessStatusCode)
			{
				generatedPlan = await response.Content.ReadFromJsonAsync<CoursePlanDTO>();
				chatMessages.Clear();

				// Save the new course plan in local storage
				await SaveGeneratedPlanAsync();
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Console.WriteLine($"Error generating course: {error}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Exception generating course: {ex.Message}");
		}
		finally
		{
			Loader.Hide();
		}
	}

	private Task ConfirmNavigationAsync(LocationChangingContext context)
	{
		if (LogoutService.IsLoggingOut)
		{
			// Allow navigation if it's a logout
			return Task.CompletedTask;
		}

		if (generatedPlan == null || !isFinalized)
		{
			// Prevent navigating away if a course plan is generated and not finalized (shows a confirmation dialog)
			context.PreventNavigation();
		}

		return Task.CompletedTask;
	}

	private async Task HandleUserChatMessage(string userMessage)
	{
		try
		{
			Loader.Show();

			Console.WriteLine("Sending adjustment request...");
			Console.WriteLine($"User message: {userMessage}");

			var serializedPlan = JsonSerializer.Serialize(generatedPlan);
			Console.WriteLine("Serialized generated plan:");
			Console.WriteLine(serializedPlan);

			var requestPayload = new
			{
				UserMessage = userMessage,
				PreviousPlan = serializedPlan
			};

			Console.WriteLine("Making POST request to /ai/adjust-course...");
			var response = await Http.PostAsJsonAsync("ai/adjust-course", requestPayload);

			Console.WriteLine($"Response received: {(int)response.StatusCode} {response.StatusCode}");

			if (response.IsSuccessStatusCode)
			{
				var json = await response.Content.ReadAsStringAsync();
				Console.WriteLine("Raw JSON from response:");
				Console.WriteLine(json);

				var adjustedPlan = JsonSerializer.Deserialize<CoursePlanDTO>(json, new JsonSerializerOptions
					{
						PropertyNameCaseInsensitive = true
					});

				if (adjustedPlan != null)
				{
					generatedPlan = adjustedPlan;
					chatMessages.Add(new CoursePlanChat.ChatMessage
						{
							Text = "Course plan updated based on your request.",
							IsUser = false
						});

					// Save updated Plan and ChateMessages to local storage
					await SaveGeneratedPlanAsync();
					await SaveChatMessagesAsync();
				}
				else
				{
					Console.WriteLine("Deserialization returned null.");
					chatMessages.Add(new CoursePlanChat.ChatMessage
						{
							Text = "The adjustment was processed but no valid plan was returned.",
							IsUser = false
						});
				}
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Console.WriteLine("Error from backend:");
				Console.WriteLine(error);

				chatMessages.Add(new CoursePlanChat.ChatMessage { Text = "Error processing your request. Please try again.", IsUser = false });
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Exception in HandleUserChatMessage: {ex}");
			chatMessages.Add(new CoursePlanChat.ChatMessage
				{
					Text = "An unexpected error occurred while sending your request.",
					IsUser = false
				});
		}
		finally
		{
			Loader.Hide();
		}
	}


	private async Task SubmitCoursePlan()
	{
		Loader.Show();
		try
		{
			var response = await Http.PostAsJsonAsync("ai/submit-course", generatedPlan);

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<JsonElement>();
				if (result.TryGetProperty("message", out var messageElement))
				{
					Console.WriteLine($"Backend message: {messageElement.GetString()}");
				}

				// TODO: Add a notification/popup to inform the user that the course is being finalized and they will be notified when it's ready.

				// Mark the course as finalized
				isFinalized = true;

				// TODO: Add logic to send data to the backend for processing

				// Redirect to dashboard
				Navigation.NavigateTo("/dashboard");
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Console.WriteLine($"Error submitting course: {error}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Exception submitting course: {ex.Message}");
		}
		finally
		{


			Loader.Hide();
		}
	}
	// Method to save the generated plan to local storage
	private async Task SaveGeneratedPlanAsync()
	{
		if (generatedPlan != null)
		{
			// Serialize the generated plan to a JSON string
			var serializedPlan = JsonSerializer.Serialize(generatedPlan);
			await JS.InvokeVoidAsync("localStorage.setItem", PlanStorageKey, serializedPlan);
		}
	}
	// Method to load the generated plan from local storage
	private async Task LoadGeneratedPlanAsync()
	{
		var serializedPlan = await JS.InvokeAsync<string>("localStorage.getItem", PlanStorageKey);
		if (!string.IsNullOrEmpty(serializedPlan))
		{
			// Deserialize the JSON string back into a CoursePlanDTO object
			generatedPlan = JsonSerializer.Deserialize<CoursePlanDTO>(serializedPlan, new JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true
				}) ?? new();
		}
	}
	// Method to save chat messages to local storage
	private async Task SaveChatMessagesAsync()
	{
		if (chatMessages != null)
		{
			// Serialize the chat messages to a JSON string
			var serializedMessages = JsonSerializer.Serialize(chatMessages);
			await JS.InvokeVoidAsync("localStorage.setItem", ChatMessagesKey, serializedMessages);
		}
	}
	// Method to load chat messages from local storage
	private async Task LoadChatMessagesAsync()
	{
		var serializedMessages = await JS.InvokeAsync<string>("localStorage.getItem", ChatMessagesKey);
		if (!string.IsNullOrEmpty(serializedMessages))
		{
			// Deserialize the JSON string back into a list of ChatMessage objects
			chatMessages = JsonSerializer.Deserialize<List<CoursePlanChat.ChatMessage>>(serializedMessages, new JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true
				}) ?? new();
		}
	}
}
