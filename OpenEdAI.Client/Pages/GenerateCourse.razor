@page "/generate-course"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using OpenEdAI.Client.Models
@using OpenEdAI.Client.Services
@using OpenEdAI.Client.Components
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject LoadingService Loader
@inject IJSRuntime JS
@inject LogoutService LogoutService
@inject NotificationService Notification
@inject StudentService StudentService
@inject ILogger<GenerateCourse> Logger
@inject UserStateService UserStateService

<!-- Warn about data loss on any navigation -->
<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="ConfirmNavigationAsync" />

<div class="generate-course-container">
	<h2>Create Your Custom Learning Path</h2>
	<p class="intro-text">
		Welcome to the Course Generator! Based on your preferences, we'll use AI to create a personalized course outline!
	</p>

	@if (!hasCompletedSetup)
	{
		<button class="button back-button" @onclick="GoToProfile">Back to profile</button>
	}

	@if (UserStateService.CoursePlan != null)
	{
		<CoursePlanDisplay Plan="UserStateService.CoursePlan" />

		<button class="button send-button" @onclick="SubmitCoursePlan">Choose this course plan</button>
		<button class="button reset-button" @onclick="ClearCoursePlan">Start Over</button>

		<CoursePlanChat Messages="UserStateService.ChatMessages" OnUserMessageSent="HandleUserChatMessage" />
	}
	else
	{
		<CourseInput OnGenerate="HandleCourseInput" />
	}
</div>


@code {
	private bool hasCompletedSetup = true;
	private string currentUsername = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var student = await StudentService.GetCurrentStudentAsync();
			currentUsername = student?.Username ?? string.Empty;

			var (completed, _) = await StudentService.GetStudentStatusAsync();
			hasCompletedSetup = completed;

			await UserStateService.LoadCoursePlanAsync(currentUsername);
			await UserStateService.LoadChatMessagesAsync(currentUsername);
			await UserStateService.LoadCourseInputAsync(currentUsername);
		}
		catch (Exception ex)
		{
			Logger.LogWarning($"GenerateCourse: Couldn't load initial state. {ex}");
		}
	}

	private void GoToProfile()
	{
		Navigation.NavigateTo("/profile");
	}

	private async Task HandleCourseInput(CoursePersonalizationInput input)
	{
		try
		{
			Loader.Show();
			UserStateService.SetLastInput(input);

			var response = await Http.PostAsync("ai/generate-coruse", JsonContent.Create(input));

			if (response.IsSuccessStatusCode)
			{
				var plan = await response.Content.ReadFromJsonAsync<CoursePlanDTO>();
				UserStateService.SetCoursePlan(plan);

				UserStateService.SetChatMessages(new List<CoursePlanChat.ChatMessage>());

				await UserStateService.SaveCoursePlanAsync(currentUsername);
				await UserStateService.SaveCourseInputAsync(currentUsername);
				await UserStateService.SaveChatMessagesAsync(currentUsername);
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Logger.LogWarning($"Error generating course: {error}");
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception generating course: {ex.Message}");
		}
		finally
		{
			Loader.Hide();
		}
	}

	private async Task HandleUserChatMessage(string userMessage)
	{
		try
		{
			Loader.Show();

			var serializedPlan = JsonSerializer.Serialize(UserStateService.CoursePlan);

			var requestPayload = new
			{
				UserMessage = userMessage,
				PreviousPlan = serializedPlan
			};

			var response = await Http.PostAsJsonAsync("ai/adjust-course", requestPayload);

			if (response.IsSuccessStatusCode)
			{
				var json = await response.Content.ReadAsStringAsync();

				var adjustedPlan = JsonSerializer.Deserialize<CoursePlanDTO>(json, new JsonSerializerOptions
					{
						PropertyNameCaseInsensitive = true
					});

				if (adjustedPlan != null)
				{
					UserStateService.SetCoursePlan(adjustedPlan);
					UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage
						{
							Text = "Course plan updated based on your request.",
							IsUser = false
						});

					// Save updated Plan and ChateMessages to local storage
					await UserStateService.SaveCoursePlanAsync(currentUsername);
					await UserStateService.SaveChatMessagesAsync(currentUsername);
				}
				else
				{
					Logger.LogError("Deserialization returned null.");
					UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage
						{
							Text = "The adjustment was processed but no valid plan was returned.",
							IsUser = false
						});
				}
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Logger.LogError("Error adjusting course:\n", error);

				UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage { Text = "Error processing your request. Please try again.", IsUser = false });
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception in HandleUserChatMessage: {ex}");
			UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage
				{
					Text = "An unexpected error occurred while sending your request.",
					IsUser = false
				});
		}
		finally
		{
			Loader.Hide();
		}
	}
	// Clear the stored CoursePlan and Chat and refresh the page
	private async Task ClearCoursePlan()
	{
		// Show a confirmation popup to the user
		bool shouldClear = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to start over?\nThis will clear your chat and generated course plan.");

		if (shouldClear)
		{
			await UserStateService.ClearCoursePlanAsync();
			await UserStateService.ClearChatMessagesAsync();
			await UserStateService.ClearCourseInputAsync();
			StateHasChanged();
		}
	}

	private async Task SubmitCoursePlan()
	{
		Loader.Show();
		try
		{
			// If lastinput is null (e.g., page refresh), try to pull it from storage
			if (UserStateService.LastInput == null)
			{
				await UserStateService.LoadCourseInputAsync(currentUsername);
			}

			var payload = new SubmitCourseRequest
				{
					Plan = UserStateService.CoursePlan!,
					UserInput = UserStateService.LastInput!
				};

			var response = await Http.PostAsJsonAsync("ai/submit-course", payload);

			if (response.IsSuccessStatusCode)
			{
				// Show a popup to the user
				await Notification.NotifyAndAwait("Your course is being finalized.\nThe dashboard will refresh in a few minutes when the AI is done working its magic!");

				// Clear the localstorage to no longer persist the input information
				await UserStateService.ClearCoursePlanAsync();
				await UserStateService.ClearChatMessagesAsync();
				await UserStateService.ClearCourseInputAsync();

				// Set a flag in local storage to poll for new courses on the dashboard
				await JS.InvokeVoidAsync("localStorage.setItem", "pollForNewCourse", "true");

				// Update the hasCompletedSetup property
				hasCompletedSetup = true;

				// Redirect to dashboard
				Navigation.NavigateTo("/dashboard");
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Logger.LogError($"Error submitting course: {error}");
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception submitting course: {ex.Message}");
		}
		finally
		{
			Loader.Hide();
		}
	}

	private async Task ConfirmNavigationAsync(LocationChangingContext context)
	{
		if (LogoutService.IsLoggingOut)
		{
			// Always allow logout
			return;
		}

		// Completed setup and has generated a plan
		if (UserStateService.CoursePlan != null && hasCompletedSetup)
		{
			// Allow navigation
			return;
		}

		// New user - block navigation
		if (!hasCompletedSetup && UserStateService.CoursePlan is null)
		{
			// Only allow navigation to the profile page
			if (context.TargetLocation.Contains("/profile"))
			{
				return;
			}
			// Block navigation to any other page
			context.PreventNavigation();
			await Notification.NotifyAndAwait("Please finish generating your first course before leaving this page.");
			return;
		}

		// Everyone Else - show a notification to warn them of losing unsaved data
		await Notification.NotifyAndAwait("Any information you've entered on this page may be lost when you leave.");

	}
}
