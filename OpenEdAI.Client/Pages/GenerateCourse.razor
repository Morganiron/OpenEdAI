@page "/generate-course"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using OpenEdAI.Client.Models
@using OpenEdAI.Client.Services
@using OpenEdAI.Client.Components
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject LoadingService Loader
@inject IJSRuntime JS
@inject LogoutService LogoutService
@inject NotificationService Notification
@inject StudentService StudentService
@inject ILogger<GenerateCourse> Logger

<!-- Warn about data loss on any navigation -->
<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="ConfirmNavigationAsync" />

<div class="generate-course-container">
	<h2>Create Your Custom Learning Path</h2>
	<p class="intro-text">
		Welcome to the Course Generator! Based on your preferences, we'll use AI to create a personalized course outline!
	</p>

	@if (generatedPlan != null)
	{
		<CoursePlanDisplay Plan="generatedPlan" />

		<button class="button send-button" @onclick="SubmitCoursePlan">Choose this course plan</button>
		<button class="button reset-button" @onclick="ClearCoursePlan">Start Over</button>

		<CoursePlanChat Messages="chatMessages" OnUserMessageSent="HandleUserChatMessage" />
	}
	else
	{
		<CourseInput OnGenerate="HandleCourseInput" />
	}
</div>


@code {
	private CoursePlanDTO generatedPlan;
	private CoursePersonalizationInput lastInput;
	private List<CoursePlanChat.ChatMessage> chatMessages = new();
	private bool isLoggingOut = false;
	private bool hasCompletedSetup = true;

	// Constant strings for local storage keys to persist data
	private const string PlanStorageKey = "cached_generated_plan";
	private const string ChatMessagesKey = "cached_chat_messages";
	private const string InputStorageKey = "cached_course_input";

	// Expiration time in hours (to remove stored items when returning to the page)
	private const int StorageExpiration = 2;

	protected override async Task OnInitializedAsync()
	{
		// Find out if this student has finished onboarding
		try
		{
			(hasCompletedSetup, _) = await StudentService.GetStudentStatusAsync();
		}
		catch (Exception ex)
		{
			Logger.LogWarning($"Generate-Course: Couldn't get student status - assuming completed. {ex}");
		}

		await LoadGeneratedPlanAsync();
		await LoadChatMessagesAsync();

		// Attempt to restore lastInput as well
		var cachedInput = await JS.InvokeAsync<string>("localStorage.getItem", InputStorageKey);
		if (!string.IsNullOrEmpty(cachedInput))
		{
			lastInput = JsonSerializer.Deserialize<CoursePersonalizationInput>(cachedInput);
		}
	}

	private async Task HandleCourseInput(CoursePersonalizationInput input)
	{
		lastInput = input;
		try
		{
			Loader.Show();

			var response = await Http.PostAsync("ai/generate-course", JsonContent.Create(input));

			if (response.IsSuccessStatusCode)
			{
				generatedPlan = await response.Content.ReadFromJsonAsync<CoursePlanDTO>();
				chatMessages.Clear();

				// Save the new course plan and the user input
				await SaveGeneratedPlanAsync();
				await JS.InvokeVoidAsync("localStorage.setItem", InputStorageKey, JsonSerializer.Serialize(lastInput));
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Logger.LogWarning($"Error generating course: {error}");
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception generating course: {ex.Message}");
		}
		finally
		{
			Loader.Hide();
		}
	}

	private async Task ConfirmNavigationAsync(LocationChangingContext context)
	{
		if (LogoutService.IsLoggingOut)
		{
			// Always allow logout
			return;
		}
		
		// Completed setup and has generated a plan
		if (generatedPlan != null && hasCompletedSetup)
		{
			return;
		}

		// New user - block navigation
		if (!hasCompletedSetup && generatedPlan is null)
		{
			context.PreventNavigation();
			await Notification.NotifyAndAwait("Please finish generating your first course before leaving this page.");
			return;
		}

		// Everyone Else - show a notification to warn them of losing unsaved data
		await Notification.NotifyAndAwait("Any information you've entered on this page may be lost when you leave.");

	}

	private async Task HandleUserChatMessage(string userMessage)
	{
		try
		{
			Loader.Show();

			var serializedPlan = JsonSerializer.Serialize(generatedPlan);

			var requestPayload = new
			{
				UserMessage = userMessage,
				PreviousPlan = serializedPlan
			};

			var response = await Http.PostAsJsonAsync("ai/adjust-course", requestPayload);

			if (response.IsSuccessStatusCode)
			{
				var json = await response.Content.ReadAsStringAsync();
				
				var adjustedPlan = JsonSerializer.Deserialize<CoursePlanDTO>(json, new JsonSerializerOptions
					{
						PropertyNameCaseInsensitive = true
					});

				if (adjustedPlan != null)
				{
					generatedPlan = adjustedPlan;
					chatMessages.Add(new CoursePlanChat.ChatMessage
						{
							Text = "Course plan updated based on your request.",
							IsUser = false
						});

					// Save updated Plan and ChateMessages to local storage
					await SaveGeneratedPlanAsync();
					await SaveChatMessagesAsync();
				}
				else
				{
					Logger.LogError("Deserialization returned null.");
					chatMessages.Add(new CoursePlanChat.ChatMessage
						{
							Text = "The adjustment was processed but no valid plan was returned.",
							IsUser = false
						});
				}
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Logger.LogError("Error from backend:\n", error);

				chatMessages.Add(new CoursePlanChat.ChatMessage { Text = "Error processing your request. Please try again.", IsUser = false });
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception in HandleUserChatMessage: {ex}");
			chatMessages.Add(new CoursePlanChat.ChatMessage
				{
					Text = "An unexpected error occurred while sending your request.",
					IsUser = false
				});
		}
		finally
		{
			Loader.Hide();
		}
	}
	// Clear the stored CoursePlan and Chat and refresh the page
	private async Task ClearCoursePlan()
	{
		// Show a confirmation popup to the user
		bool shouldClear = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to start over?\nThis will clear your chat and generated course plan.");

		if (shouldClear)
		{
			await JS.InvokeVoidAsync("localStorage.removeItem", PlanStorageKey);
			await JS.InvokeVoidAsync("localStorage.removeItem", ChatMessagesKey);
			await JS.InvokeVoidAsync("localStorage.removeItem", InputStorageKey);

			// Reset the in-memory state
			generatedPlan = null;
			chatMessages.Clear();

			// Trigger a re-render of the current component
			StateHasChanged();
		}
	}

	private async Task SubmitCoursePlan()
	{
		Loader.Show();
		try
		{
			// If lastinput is null (e.g., page refresh), try to pull it from storage
			if (lastInput == null)
			{
				var cachedInput = await JS.InvokeAsync<string>("localStorage.getItem", InputStorageKey);

				if (!string.IsNullOrEmpty(cachedInput))
				{
					lastInput = JsonSerializer.Deserialize<CoursePersonalizationInput>(cachedInput);
				}
			}

			var payload = new SubmitCourseRequest
				{
					Plan = generatedPlan,
					UserInput = lastInput!
				};

			var response = await Http.PostAsJsonAsync("ai/submit-course", payload);

			if (response.IsSuccessStatusCode)
			{
				// Show a popup to the user
				await Notification.NotifyAndAwait("Your course is being finalized.\nThe dashboard will refresh in a few minutes when the AI is done working its magic!");

				// Clear the localstorage to no longer persist the input information
				await JS.InvokeVoidAsync("localStorage.removeItem", PlanStorageKey);
				await JS.InvokeVoidAsync("localStorage.removeItem", ChatMessagesKey);

				// Redirect to dashboard
				Navigation.NavigateTo("/dashboard");
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Logger.LogError($"Error submitting course: {error}");
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception submitting course: {ex.Message}");
		}
		finally
		{
			Loader.Hide();
		}
	}
	// Method to save the generated plan to local storage
	private async Task SaveGeneratedPlanAsync()
	{
		if (generatedPlan != null)
		{
			var wrapper = new
			{
				Data = generatedPlan,
				Timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
			};

			// Serialize the generated plan to a JSON string
			var serialized = JsonSerializer.Serialize(wrapper);
			await JS.InvokeVoidAsync("localStorage.setItem", PlanStorageKey, serialized);
		}
	}
	// Method to load the generated plan from local storage
	private async Task LoadGeneratedPlanAsync()
	{
		var serialized = await JS.InvokeAsync<string>("localStorage.getItem", PlanStorageKey);

		if (!string.IsNullOrEmpty(serialized))
		{
			try
			{
				var wrapper = JsonSerializer.Deserialize<JsonElement>(serialized);
				if (wrapper.ValueKind == JsonValueKind.Object &&
					wrapper.TryGetProperty("Timestamp", out var timestampProp) &&
					wrapper.TryGetProperty("Data", out var dataProp))
				{
					var timestamp = timestampProp.GetInt64();
					var age = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - timestamp;
					if (age < StorageExpiration * 60 * 60 * 1000)
					{
						generatedPlan = JsonSerializer.Deserialize<CoursePlanDTO>(dataProp.GetRawText(), new JsonSerializerOptions
							{
								PropertyNameCaseInsensitive = true
							});
						return;
					}
				}
			}
			catch (Exception ex)
			{
				Logger.LogError($"Invalid plan format or exception: {ex.Message}");
			}

			// If any of the above fails, clear the old storage
			await JS.InvokeVoidAsync("localStorage.removeItem", PlanStorageKey);

		}
	}
	// Method to save chat messages to local storage
	private async Task SaveChatMessagesAsync()
	{
		if (chatMessages != null)
		{
			var wrapper = new
			{
				Data = chatMessages,
				Timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
			};

			// Serialize the generated plan to a JSON string
			var serialized = JsonSerializer.Serialize(wrapper);
			await JS.InvokeVoidAsync("localStorage.setItem", ChatMessagesKey, serialized);
		}
	}
	// Method to load chat messages from local storage
	private async Task LoadChatMessagesAsync()
	{
		var serialized = await JS.InvokeAsync<string>("localStorage.getItem", ChatMessagesKey);

		if (!string.IsNullOrEmpty(serialized))
		{
			try
			{
				var wrapper = JsonSerializer.Deserialize<JsonElement>(serialized);
				if (wrapper.ValueKind == JsonValueKind.Object &&
					wrapper.TryGetProperty("Timestamp", out var timestampProp) &&
					wrapper.TryGetProperty("Data", out var dataProp))
				{
					var timestamp = timestampProp.GetInt64();
					var age = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - timestamp;
					if (age < StorageExpiration * 60 * 60 * 1000)
					{
						chatMessages = JsonSerializer.Deserialize<List<CoursePlanChat.ChatMessage>>(dataProp.GetRawText(), new JsonSerializerOptions
							{
								PropertyNameCaseInsensitive = true
							});
						return;
					}
				}
			}
			catch (Exception ex)
			{
				Logger.LogError($"Invalid chat format or exception: {ex.Message}");
			}

			// Clear legacy or corrupted data
			await JS.InvokeVoidAsync("localStorage.removeItem", ChatMessagesKey);
		}
	}
}
