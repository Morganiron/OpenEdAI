@page "/generate-course"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using OpenEdAI.Client.Models
@using OpenEdAI.Client.Services
@using OpenEdAI.Client.Components
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject LoadingService Loader
@inject IJSRuntime JS
@inject LogoutService LogoutService
@inject NotificationService Notification
@inject StudentService StudentService
@inject ILogger<GenerateCourse> Logger
@inject UserStateService UserStateService

<!-- Warn about data loss on proper conditions -->
<NavigationLock ConfirmExternalNavigation="@(!isSubmitting && !LogoutService.IsLoggingOut)" OnBeforeInternalNavigation="ConfirmNavigationAsync" />

<div class="generate-course-container">
	<h2>Create Your Custom Learning Path</h2>
	<p class="intro-text">
		Welcome to the Course Generator! Based on your preferences, we'll use AI to create a personalized course outline!
	</p>

	@if (!hasCompletedSetup)
	{
		<button class="button back-button" @onclick="GoToProfile">Back to profile</button>
	}

	@if (UserStateService.CoursePlan != null)
	{
		<CoursePlanDisplay Plan="UserStateService.CoursePlan" />

		<div class="button-container">
			<!-- Validation of proper course plan object to display submit button -->
			@if (UserStateService.CoursePlan is not null
																			&& UserStateService.CoursePlan.Title != "Warning"
																			&& UserStateService.CoursePlan.Lessons?.Any() == true)
			{
				<button class="button send-button" @onclick="SubmitCoursePlan">Choose this course plan</button>
			}

			<button class="button reset-button" @onclick="ClearCoursePlan">Start Over</button>
		</div>


		<CoursePlanChat Messages="UserStateService.ChatMessages" OnUserMessageSent="HandleUserChatMessage" />
	}
	else
	{
		<CourseInput OnGenerate="HandleCourseInput" />
	}
</div>


@code {
	private bool hasCompletedSetup = true;
	private bool isSubmitting = false;
	private string currentUsername = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var student = await StudentService.GetCurrentStudentAsync();
			currentUsername = student?.Username ?? string.Empty;

			var (completed, _) = await StudentService.GetStudentStatusAsync();
			hasCompletedSetup = completed;

			await UserStateService.LoadCoursePlanAsync(currentUsername);
			await UserStateService.LoadChatMessagesAsync(currentUsername);
			await UserStateService.LoadCourseInputAsync(currentUsername);
		}
		catch (Exception ex)
		{
			Logger.LogWarning($"GenerateCourse: Couldn't load initial state. {ex}");
		}
	}

	private void GoToProfile()
	{
		Navigation.NavigateTo("/profile");
	}

	private async Task HandleCourseInput(CoursePersonalizationInput input)
	{
		try
		{
			Loader.Show();
			UserStateService.SetLastInput(input);

			var response = await Http.PostAsync("ai/generate-course", JsonContent.Create(input));

			var json = await response.Content.ReadAsStringAsync();

			// Parse and set the CoursePlan based on AI response (valid plan or warning)
			ParseAndSetCoursePlan(json);

			if (response.IsSuccessStatusCode)
			{
				UserStateService.SetChatMessages(new List<CoursePlanChat.ChatMessage>());
				await UserStateService.SaveCoursePlanAsync(currentUsername);
				await UserStateService.SaveCourseInputAsync(currentUsername);
				await UserStateService.SaveChatMessagesAsync(currentUsername);
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Logger.LogWarning($"Error generating course: {error}");
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception generating course: {ex.Message}");
		}
		finally
		{
			Loader.Hide();
		}
	}

	private async Task HandleUserChatMessage(string userMessage)
	{
		try
		{
			Loader.Show();
			var serializedPlan = JsonSerializer.Serialize(UserStateService.CoursePlan);

			var requestPayload = new
			{
				UserMessage = userMessage,
				PreviousPlan = serializedPlan
			};

			var response = await Http.PostAsJsonAsync("ai/adjust-course", requestPayload);

			var json = await response.Content.ReadAsStringAsync();
			// Parse and set the CoursePlan based on AI adjustment response (valid plan or warning)
			ParseAndSetCoursePlan(json);

			if (response.IsSuccessStatusCode)
			{
				UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage
					{
						Text = "Course plan updated based on your request.",
						IsUser = false
					});

				// Save updated Plan and ChatMessages to local storage
				await UserStateService.SaveCoursePlanAsync(currentUsername);
				await UserStateService.SaveChatMessagesAsync(currentUsername);
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Logger.LogError("Error adjusting course:\n", error);

				UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage { Text = "Error processing your request. Please try again.", IsUser = false });
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception in HandleUserChatMessage: {ex}");
			UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage
				{
					Text = "An unexpected error occurred while sending your request.",
					IsUser = false
				});
		}
		finally
		{
			Loader.Hide();
		}
	}

	// Helper method to parse course plan or warning message
	private void ParseAndSetCoursePlan(string json)
	{

		if (json.Contains("\"Warning\""))
		{
			var warningObj = JsonSerializer.Deserialize<Dictionary<string, string>>(json);

			UserStateService.SetCoursePlan(new CoursePlanDTO
				{
					Title = "Warning",
					Description = warningObj?["Warning"] ?? "An unknown issue occurred.",
					Tags = new List<string>(),
					Lessons = new List<LessonPlanDTO>()
				});
			InvokeAsync(StateHasChanged);

		}
		else
		{
			var plan = JsonSerializer.Deserialize<CoursePlanDTO>(json, new JsonSerializerOptions
				{
					PropertyNameCaseInsensitive = true
				});

			UserStateService.SetCoursePlan(plan);
			InvokeAsync(StateHasChanged);
		}
	}


	// Clear the stored CoursePlan and Chat and refresh the page
	private async Task ClearCoursePlan()
	{
		// Show a confirmation popup to the user
		bool shouldClear = await Notification.ConfirmAsync("Are you sure you want to start over?\nThis will clear your chat and generated course plan.");

		if (shouldClear)
		{
			// Ensure a full memory wipe.
			await UserStateService.ClearCourseDataAsync();
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task SubmitCoursePlan()
	{
		Loader.Show();

		// Double check the CoursePlan is valid
		if (!UserStateService.CoursePlan.Lessons.Any())
		{
			return;
		}

		try
		{
			// If lastinput is null (e.g., page refresh), try to pull it from storage
			if (UserStateService.LastInput == null)
			{
				await UserStateService.LoadCourseInputAsync(currentUsername);
			}

			var payload = new SubmitCourseRequest
				{
					Plan = UserStateService.CoursePlan!,
					UserInput = UserStateService.LastInput!
				};

			var response = await Http.PostAsJsonAsync("ai/submit-course", payload);

			if (response.IsSuccessStatusCode)
			{
				// Show a popup to the user
				await Notification.NotifyAndAwait("Your course is being finalized.\nThe dashboard will refresh in a few minutes when the AI is done working its magic!");

				// Clear the localstorage to no longer persist the input information
				await UserStateService.ClearCoursePlanAsync();
				await UserStateService.ClearChatMessagesAsync();
				await UserStateService.ClearCourseInputAsync();

				// Set a flag in local storage to poll for new courses on the dashboard
				await JS.InvokeVoidAsync("localStorage.setItem", "pollForNewCourse", "true");

				// Mark setup as complete and that the user is submitting
				// (dont't show the notification that data may be lost)
				hasCompletedSetup = true;
				isSubmitting = true;

				// Redirect to dashboard
				Navigation.NavigateTo("/dashboard");
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				Logger.LogError($"Error submitting course: {error}");
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception submitting course: {ex.Message}");
		}
		finally
		{
			Loader.Hide();
		}
	}

	private async Task ConfirmNavigationAsync(LocationChangingContext context)
	{
		// If any user isSubmitting, they have completed setup - allow navigation - no warning
		if (isSubmitting)
		{
			// Always allow an acitve submit
			// Clear data
			await UserStateService.ClearCourseDataAsync();
			return;
		}

		// Always allow logout, but show data loss warning
		if (LogoutService.IsLoggingOut)
		{
			// Show data loss warning
			var confirm = await Notification.ConfirmAsync("You have not saved your course yet.\nAny information you've entered on this page may be lost when you leave.");
			if (!confirm)
			{
				// User canceled the navigation
				context.PreventNavigation();
			}
			return;
		}

		// New user - has not generated a course yet
		if (!hasCompletedSetup )
		{
			// Only allow navigation to the profile page
			if (context.TargetLocation.Contains("/profile"))
			{
				return;
			}
			// Block navigation to any other page
			context.PreventNavigation();
			await Notification.NotifyAndAwait("Please finish generating your first course before leaving this page.");
			return;
		}

		// Has completed setup, but is not submitting - keep stored data in window cache until new user logs in or time has expired
		var conf = await Notification.ConfirmAsync("You have not saved your course yet.\nAny information you've entered on this page may be lost when you leave.");
		if (!conf)
		{
			// User canceled the navigation
			context.PreventNavigation();
		}
		
	}
}
