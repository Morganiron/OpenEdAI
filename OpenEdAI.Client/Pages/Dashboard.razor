@page "/dashboard"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using OpenEdAI.Client.Models
@using OpenEdAI.Client.Components
@using OpenEdAI.Client.Services
@inject IJSRuntime JS
@inject Services.CourseService CourseService
@inject Services.CourseProgressService ProgressService
@inject NotificationService Notification

<!-- Main Dashboard Layout -->
<div class="dashboard-grid">
	<!-- Left Column: Course Cards -->
	<div class="column-1">
		<div class="course-cards-container">
			<h2 class="course-cards-heading">Your Enrolled Courses</h2>
			<!-- Search bar -->
			<input class="fa-search course-search-input"
				   type="text"
				   placeholder="Search your courses..."
				   @oninput="(e) => searchQuery = e.Value!.ToString()!" />

			<!-- Show loading, no courses, or course list -->
			@if (courses == null)
			{
				<p>Loading courses...</p>
			}
			else if (!courses.Any())
			{
				<p>No courses.</p>
			}
			else
			{
				@foreach (var course in FilteredCourses)
				{
					<CourseCard Course="course" Progress="@GetProgressForCourse(course.CourseID)" OnDelete="@(() => HandleUnenroll(course.CourseID))"/>
				}
			}
		</div>
	</div>

	<!-- Right Column: Progress Report -->
	<div class="column-2">
		<ProgressReport ProgressData="progressData" Courses="courses" />
	</div>
</div>

@code {
	
	private List<CourseDTO> courses;
	private List<CourseProgressDTO> progressData;
	private string searchQuery = "";
	private Timer refreshTimer;
	private int previousCourseCount = 0;

	// Computed property: filters courses based on search input
	private IEnumerable<CourseDTO> FilteredCourses
	{
		get
		{
			if (string.IsNullOrWhiteSpace(searchQuery))
			{
				return courses;
			}

			var searchTerms = searchQuery.Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

			return courses.Where(course =>
				searchTerms.Any(term =>
					(!string.IsNullOrEmpty(course.Title) && course.Title.Contains(term, StringComparison.OrdinalIgnoreCase)) ||
					(course.Tags != null && course.Tags.Any(tag => tag.Contains(term, StringComparison.OrdinalIgnoreCase)))
				)
			);
		}
	}

	// Lifecycle: Load initial courses and progress data
	protected override async Task OnInitializedAsync()
	{
		courses = await CourseService.GetEnrolledCoursesAsync();
		progressData = await ProgressService.GetUserProgressAsync();

		// Check if polling needs to start after course creation
		var pollFlag = await JS.InvokeAsync<string>("localStorage.getItem", "pollForNewCourse");

		if (pollFlag == "true")
		{
			StartPollingForNewCourse();
		}
	}

	// Handle unenrollment from a course
	private async Task HandleUnenroll(int courseId)
	{
		var confirm = await Notification.ConfirmAsync("Are you sure you want to unenroll from this course?\nIt will no longer be available.");

		if (!confirm) return;

		// Attempt to unenroll the student from the course
		var success = await CourseService.UnenrollFromCourseAsync(courseId);

		if (success)
		{
			courses = await CourseService.GetEnrolledCoursesAsync();
			progressData = await ProgressService.GetUserProgressAsync();
			await InvokeAsync(StateHasChanged);
		}
		else
		{
			await Notification.NotifyAndAwait("Failed to unenroll from the course. Please try again later.");
		}
	}

	// Starts polling to detect newly created courses
	private void StartPollingForNewCourse()
	{
		previousCourseCount = courses?.Count ?? 0;

		refreshTimer = new Timer(async _ =>
		{
			var latestCourses = await CourseService.GetEnrolledCoursesAsync();

			if (latestCourses.Count > previousCourseCount)
			{
				// Update course list and UI when a new course is detected
				courses = latestCourses;
				previousCourseCount = courses.Count;

				// Update the progress data for the progress report
				progressData = await ProgressService.GetUserProgressAsync();

				// Clear the poll flag from local storage
				await JS.InvokeVoidAsync("localStorage.removeItem", "pollForNewCourse");

				// Stop polling
				refreshTimer?.Dispose();
				refreshTimer = null;

				await InvokeAsync(StateHasChanged);
			}
		},
		null,
		TimeSpan.Zero,
		TimeSpan.FromSeconds(20)); // Poll every 20 seconds
	}

	// Cleanup: Dispose the timer when the component is destroyed
	public async ValueTask DisposeAsync()
	{
		refreshTimer?.Dispose();
		await Task.CompletedTask;
	}

	// Retrieve user's progress for a specific course
	private CourseProgressDTO GetProgressForCourse(int courseId)
	{
		return progressData.FirstOrDefault(p => p.CourseID == courseId)
			?? new CourseProgressDTO
				{
					CourseID = courseId,
					UserID = "",
					UserName = "",
					LessonsCompleted = 0,
					CompletedLessons = new List<int>(),
					CompletionPercentage = 0,
					LastUpdated = DateTime.UtcNow
				};
	}
}