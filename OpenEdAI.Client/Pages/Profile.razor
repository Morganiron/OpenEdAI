@page "/profile"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Routing
@using OpenEdAI.Client.Models
@using OpenEdAI.Client.Services
@inject NavigationManager Navigation
@inject NotificationService Notification
@inject HttpClient Http
@inject LoadingService Loader
@inject StudentService StudentService
@inject LogoutService LogoutService
@inject UserStateService UserStateService
@inject IJSRuntime JS
@inject TokenManager TokenManager
@inject ILogger<Profile> Logger

<!-- Prevent navigation if required fields are not completed -->
<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="ConfirmNavigationAsync" />

<div class="profile-container">

    <h3>Your Profile</h3>

    @if (isLoading)
    {
        <p>Loading profile...</p>
    }
    else if (profileModel == null)
    {
        <p>Error loading profile.</p>
    }
    else
    {
        <EditForm EditContext="editContext"
        OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Custom Error Message -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <!-- Username read-only from Cognito -->
            <div class="mb-3">
                <label class="form-label">
                    <strong>Username:</strong> <span class="username-display">@profileModel.Username</span>
                </label>
            </div>

            <!-- Education Level as a dropdown -->
            <div class="mb-3">
                <label class="form-label"><strong>Education Level:</strong></label>
                <InputSelect @bind-Value="profileModel.EducationLevel" class="form-select" @onchange="async (_) => await UserStateService.SaveProfileStateAsync(profileModel.Username)">
                    <option value="">Select your education level</option>
                    @foreach (var level in availableEducationLevels)
                    {
                        <option value="@level">@level</option>
                    }
                </InputSelect>
            </div>

            <!-- Preferred Content Type checkboxes -->
            <div class="mb-3">
                <label class="form-label"><strong>Preferred Content Types:</strong></label>
                @foreach (var type in availableContentTypes)
                {
                    <div class="form-check">
                        <InputCheckbox class="form-check-input"
                        Value="@contentTypeSelections[type]"
                        ValueChanged="@(value => OnPreferredContentTypesChanged(type, value))"
                        ValueExpression="@(() => contentTypeSelections[type])" />
                        <label class="form-check-label">@type</label>
                    </div>
                }
            </div>

            <!-- Special Considerations checkboxes -->
            <div class="mb-3">
                <label class="form-label"><strong>Special Considerations (optional):</strong></label>
                @foreach (var option in availableSpecialConsiderations)
                {
                    <div class="form-check">
                        <InputCheckbox class="form-check-input"
                        Value="@specialConsiderationSelections[option]"
                        ValueChanged="@(value => OnSpecialConsiderationsChanged(option, value))"
                        ValueExpression="@(() => specialConsiderationSelections[option])" />
                        <label class="form-check-label">@option</label>
                    </div>
                }
                <small class="text-muted">
                    If "Other" is selected in Education or Special Considerations,<br />
                    please provide details in Additional Information.
                </small>
            </div>

            <!-- Additional Considerations Information -->
            <div class="mb-3">
                <label class="form-label"><strong>Additional Information:</strong></label>
                @if (!isEditingAdditionalConsiderations)
                {
                    <div>
                        @if (string.IsNullOrWhiteSpace(profileModel.AdditionalConsiderations))
                        {
                            <em>No Additional information provided. </em>
                        }
                        else
                        {
                            @profileModel.AdditionalConsiderations
                        }
                        <button type="button" class="btn-link" @onclick="() => isEditingAdditionalConsiderations = true">
                            <i class="fas fa-pencil"></i>
                        </button>
                    </div>
                }
                else
                {
                    <InputTextArea @bind-Value="profileModel.AdditionalConsiderations"
                    class="form-control"
                    placeholder="@GetDefaultAdditionalPrompt()"
                    @oninput="HandleProfileChanged" />
                    <button type="button" class="button" @onclick="() => isEditingAdditionalConsiderations = false">Cancel</button>
                }
            </div>

            <button type="submit" class="button">Save Profile Changes</button>
        </EditForm>
    }
</div>

@code {
    private bool isLoading = true;
    private bool isNewUser = false;
    private bool isEditingAdditionalConsiderations = false;
    private string errorMessage = string.Empty;
    private ProfileModel profileModel = new ProfileModel();
    private EditContext editContext;

    // Available options
    private List<string> availableEducationLevels = new() { "Elementary", "Middle School", "High School", "Associate's", "Bachelor's", "Master's", "PhD", "Other" };
    private List<string> availableContentTypes = new() { "Video tutorials", "Articles", "Discussion forums" };
    private List<string> availableSpecialConsiderations = new() { "ADHD", "Autism", "Dyslexia", "Other" };

    // Checkboxes
    private Dictionary<string, bool> contentTypeSelections = new();
    private Dictionary<string, bool> specialConsiderationSelections = new();

    // Default prompt text for Additional Considerations field
    private readonly string educationOtherDefault = "Education(Other): Please enter your education";
    private readonly string specialOtherDefault = "Special Considerations(Other): Please enter any special circumstance";

    protected override async Task OnInitializedAsync()
    {
        Loader.Show();
        try
        {
            // Fetch the "remote" profile from the API
            await UserStateService.LoadProfileStateAsync();
            var student = await StudentService.GetCurrentStudentAsync();

            // Check if the user is new
            isNewUser = !student.HasCompletedSetup;

            // Check if the user is the same as the one stored in the state
            if (UserStateService.Username != student.Username)
            {
                await UserStateService.ClearProfileStateAsync();
                UserStateService.SetProfileDTO(student.Profile ?? new StudentProfileDTO());
                UserStateService.SetUsername(student.Username);
                await UserStateService.SaveProfileStateAsync(student.Username);
            }
            // If the profile is not set, set it to the current student profile or create a blank one
            else if (UserStateService.ProfileDTO == null)
            {
                UserStateService.SetProfileDTO(student.Profile ?? new StudentProfileDTO());
                await UserStateService.SaveProfileStateAsync(student.Username);
            }

            // Load the profile data into the model
            var dto = UserStateService.ProfileDTO;

            // Set the values for the profile
            profileModel = new ProfileModel
                {
                    Username = student.Username,
                    EducationLevel = dto.EducationLevel,
                    PreferredContentTypes = dto.PreferredContentTypes,
                    SpecialConsiderations = dto.SpecialConsiderations,
                    AdditionalConsiderations = dto.AdditionalConsiderations
                };

            // If additional considerations are set as whitespace (" ") from the database, set it to empty string
            if (profileModel.AdditionalConsiderations?.Trim() == "")
            {
                profileModel.AdditionalConsiderations = string.Empty;
            }


            editContext = new EditContext(profileModel);


            // Initialize the checkboxes
            foreach (var type in availableContentTypes)
            {
                contentTypeSelections[type] = profileModel.PreferredContentTypes?.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Contains(type) ?? false;
            }

            foreach (var option in availableSpecialConsiderations)
            {
                specialConsiderationSelections[option] = profileModel.SpecialConsiderations?.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Contains(option) ?? false;
            }

            await UserStateService.SaveProfileStateAsync(profileModel.Username);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading profile");
        }
        finally
        {
            isLoading = false;
            Loader.Hide();
        }
    }

    // Method to handle changes in the profile
    private async Task HandleProfileChanged(ChangeEventArgs args)
    {
        await UserStateService.SaveProfileStateAsync(profileModel.Username);
    }

    // Method to handle changes in preferred content types
    private async Task OnPreferredContentTypesChanged(string type, bool newValue)
    {
        contentTypeSelections[type] = newValue;
        profileModel.PreferredContentTypes = string.Join(", ", contentTypeSelections.Where(x => x.Value).Select(x => x.Key));
        editContext.NotifyValidationStateChanged();
        await UserStateService.SaveProfileStateAsync(profileModel.Username);
        StateHasChanged();
    }

    // Method to handle changes in special considerations
    private async Task OnSpecialConsiderationsChanged(string option, bool newValue)
    {
        specialConsiderationSelections[option] = newValue;
        profileModel.SpecialConsiderations = string.Join(", ", specialConsiderationSelections.Where(x => x.Value).Select(x => x.Key));
        editContext.NotifyValidationStateChanged();
        await UserStateService.SaveProfileStateAsync(profileModel.Username);
        StateHasChanged();
    }

    // Method to handle form submission
    private async Task HandleValidSubmit()
    {
        var student = await StudentService.GetCurrentStudentAsync();
        profileModel.Username = student.Username;

        // Always save a single space if empty, to prevent DB null errors
        profileModel.AdditionalConsiderations = string.IsNullOrWhiteSpace(profileModel.AdditionalConsiderations)
            ? " "
            : profileModel.AdditionalConsiderations.Trim();


        Loader.Show();
        try
        {
            await StudentService.UpdateStudentProfileAsync(profileModel.ToUpdateDTO());
            UserStateService.SetProfileDTO(profileModel.ToUpdateDTO().Profile);
            await UserStateService.SaveProfileStateAsync(profileModel.Username);

            // Check if the user is new and navigate accordingly
            if (isNewUser)
            {
                await UserStateService.ClearProfileStateAsync();
                Navigation.NavigateTo("/generate-course", replace: true);
            }
            else
            {
                await UserStateService.ClearProfileStateAsync();
                Navigation.NavigateTo("/dashboard", replace: true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving profile");
        }
        finally
        {
            Loader.Hide();
        }
    }

    // Method to handle navigation lock
    private async Task ConfirmNavigationAsync(LocationChangingContext context)
    {
        // Always allow logout
        if (LogoutService.IsLoggingOut)
        {
            await UserStateService.ClearProfileStateAsync();
            return;

        }


        // Do not allow them to go to other pages until the profile is complete
        if (isNewUser && profileModel.IsProfileIncomplete())
        {
            context.PreventNavigation();
            await Notification.NotifyAndAwait("You must complete your profile and generate your first course\nto finish the onboarding process.");

        }
        return;
    }

    // Method to build the default prompt(s) based on the current selections
    private string GetDefaultAdditionalPrompt()
    {
        string prefix = "";
        if (!string.IsNullOrEmpty(profileModel.EducationLevel) && profileModel.EducationLevel.Contains("Other", StringComparison.OrdinalIgnoreCase))
        {
            prefix += $"{educationOtherDefault}\n";
        }
        if (specialConsiderationSelections.Any(x => x.Value && x.Key.Contains("Other", StringComparison.OrdinalIgnoreCase)))
        {
            prefix += $"{specialOtherDefault}\n";
        }
        return prefix;
    }

    public class ProfileModel : IValidatableObject
    {
        public string Username { get; set; }
        public string EducationLevel { get; set; }
        public string PreferredContentTypes { get; set; }
        public string SpecialConsiderations { get; set; }
        public string AdditionalConsiderations { get; set; }

        public bool IsProfileIncomplete() =>
            string.IsNullOrWhiteSpace(EducationLevel) ||
            string.IsNullOrWhiteSpace(PreferredContentTypes);

        // Consolidated custom validation:
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (string.IsNullOrWhiteSpace(EducationLevel))
            {
                yield return new ValidationResult("Education level is required.", new[] { nameof(EducationLevel) });
            }
            if (string.IsNullOrWhiteSpace(PreferredContentTypes))
            {
                yield return new ValidationResult("Preferred content types are required.", new[] { nameof(PreferredContentTypes) });
            }

            // For "Other" selections, if EducationLevel contains "Other" but AdditionalConsiderations is empty:
            bool educationIsOther = !string.IsNullOrWhiteSpace(EducationLevel) &&
                                     EducationLevel.Contains("Other", StringComparison.OrdinalIgnoreCase);

            // Similarly, if SpecialConsiderations contains "Other" but AdditionalConsiderations is empty:
            bool specialConsiderationsIsOther = !string.IsNullOrWhiteSpace(SpecialConsiderations) &&
                                     SpecialConsiderations.Contains("Other", StringComparison.OrdinalIgnoreCase);

            if ((educationIsOther || specialConsiderationsIsOther) &&
                string.IsNullOrWhiteSpace(AdditionalConsiderations))
            {
                yield return new ValidationResult(
                    "Additional Information is required when 'Other' is selected.",
                    new[] { nameof(AdditionalConsiderations) });
            }
        }

        public UpdateStudentDTO ToUpdateDTO()
        {
            return new UpdateStudentDTO
                {
                    Username = this.Username,
                    Profile = new StudentProfileDTO
                    {
                        EducationLevel = this.EducationLevel,
                        PreferredContentTypes = this.PreferredContentTypes,
                        SpecialConsiderations = this.SpecialConsiderations,
                        AdditionalConsiderations = this.AdditionalConsiderations
                    }
                };
        }
    }
}
