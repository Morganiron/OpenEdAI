@page "/profile"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Routing
@using OpenEdAI.Client.Models
@using OpenEdAI.Client.Services
@inject NavigationManager Navigation
@inject HttpClient Http
@inject LoadingService Loader
@inject StudentService StudentService
@inject LogoutService LogoutService
@inject UserStateService StudentProfileState
@inject IJSRuntime JS
@inject TokenManager TokenManager
@inject ILogger<Profile> Logger

<!-- Prevent navigation if required fields are not completed -->
<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="ConfirmNavigationAsync" />

<div class="profile-container">

    <h3>Your Profile</h3>

    @if (isLoading)
    {
        <p>Loading profile...</p>
    }
    else if (profileModel == null)
    {
        <p>Error loading profile.</p>
    }
    else
    {
        <EditForm EditContext="editContext"
        OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Custom Error Message -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <!-- Username read-only from Cognito -->
            <div class="mb-3">
                <label class="form-label">
                    Username: <span class="username-display">@profileModel.Username</span>
                </label>
            </div>

            <!-- Education Level as a dropdown -->
            <div class="mb-3">
                <label class="form-label">Education Level:</label>
                <InputSelect @bind-Value="profileModel.EducationLevel" class="form-select" @onchange="async (_) => await StudentProfileState.SaveProfileStateAsync(profileModel.Username)">
                    <option value="">Select your education level</option>
                    @foreach (var level in availableEducationLevels)
                    {
                        <option value="@level">@level</option>
                    }
                </InputSelect>
            </div>

            <!-- Preferred Content Type checkboxes -->
            <div class="mb-3">
                <label class="form-label">Preferred Content Types:</label>
                @foreach (var type in availableContentTypes)
                {
                    <div class="form-check">
                        <InputCheckbox class="form-check-input"
                        Value="@specialConsiderationSelections[type]"
                        ValueChanged="@(value => OnPreferredContentTypesChanged(type, checkedValue))"
                        ValueExpression="@(() => contentTypeSelections[type])" />
                        <label class="form-check-label">@option</label>
                    </div>
                }
                <small class="text-muted">
                    If "Other" is selected in Education or Special Considerations,<br />
                    please provide details in Additional Information.
                </small>
            </div>

            <!-- Additional Considerations Information -->
            <div class="mb-3">
                <label class="form-label">Additional Information:</label>
                @if (!isEditingAdditionalConsiderations)
                {
                    <div>
                        @if (string.IsNullOrWhiteSpace(profileModel.AdditionalConsiderations))
                        {
                            <em>No Additional information provided.</em>
                        }
                        else
                        {
                            @profileModel.AdditionalConsiderations
                        }
                        <button type="button" class="btn btn-link" @onclick="() => isEditingAdditionalConsiderations = true">
                            <i class="bi bi-pencil"></i>
                        </button>
                    </div>
                }
                else
                {
                    <InputTextArea @bind-Value="profileModel.AdditionalConsiderations" class="form-control"
                    placeholder="@GetDefaultAdditionalPrompt()" @bind-Value:event="oninput" ValueChanged="async (_) => await StudentProfileState.SaveStateAsync(profileModel.Username)"/>
                    <button type="button" class="button" @onclick="() => isEditingAdditionalConsiderations = false">Cancel</button>
                }
            </div>

            <button type="submit" class="button">Save Profile Changes</button>

        </EditForm>
    }
</div>

@code {
    private bool isLoading = true;
    private bool isNewUser = false;
    private string errorMessage = string.Empty;
    private ProfileModel profileModel = new ProfileModel();
    private EditContext editContext;

    // Editing flags for each field
    private bool isEditingAdditionalConsiderations = false;

    // Available options
    private List<string> availableEducationLevels = new() { "Elementary", "Middle School", "High School", "Associate's", "Bachelor's", "Master's", "PhD", "Other" };
    private List<string> availableContentTypes = new() { "Video tutorials", "Articles", "Discussion forums" };
    private List<string> availableSpecialConsiderations = new() { "ADHD", "Autism", "Dyslexia", "Other" };

    // Checkboxes for Preferred content types
    private Dictionary<string, bool> contentTypeSelections = new Dictionary<string, bool>();

    // Checkboxes for Special Considerations
    private Dictionary<string, bool> specialConsiderationSelections = new Dictionary<string, bool>();

    // Default prompt text for Additional Considerations field
    private readonly string educationOtherDefault = "Education(Other): Please enter your education";
    private readonly string specialOtherDefault = "Special Considerations(Other): Please enter any special circumstance";

    protected override async Task OnInitializedAsync()
    {
        Loader.Show();
        try
        {
            await StudentProfileState.LoadProfileStateAsync();

            // Fetch the user, status, and "remote" profile from the API
            var student = await StudentService.GetCurrentStudentAsync();
            isNewUser = !student.HasCompletedSetup;

            // If the saved username doesn't match the current user, clear the cache
            if (StudentProfileState.Username != student.Username)
            {
                await StudentProfileState.ClearProfileStateAsync();
                StudentProfileState.ProfileDTO = student.Profile ?? new StudentProfileDTO();
                await StudentProfileState.SaveStateAsync(student.Username);
            }
			else if (StudentProfileState.ProfileDTO == null)
			{
				// No profile loaded, fallback
				StudentProfileState.ProfileDTO = student.Profile ?? new StudentProfileDTO();
				await StudentProfileState.SaveStateAsync(student.Username);
			}

            // Set the DTO to the most up-to-date profile
            var dto = StudentProfileState.ProfileDTO;

            // Load profileModel
            profileModel = new ProfileModel
            {
                Username = student.Username,
                EducationLevel = dto.EducationLevel,
                PreferredContentTypes = dto.PreferredContentTypes,
                SpecialConsiderations = dto.SpecialConsiderations,
                AdditionalConsiderations = dto.AdditionalConsiderations
            };

            editContext = new EditContext(profileModel);

            // Initialize the checkboxes
            foreach (var type in availableContentTypes)
            {
                contentTypeSelections[type] = profileModel.PreferredContentTypes?.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Contains(type) ?? false;
            }

            foreach (var option in availableSpecialConsiderations)
            {
                specialConsiderationSelections[option] = profileModel.SpecialConsiderations?.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Contains(option) ?? false;
            }
            if (!string.IsNullOrEmpty(profileModel.SpecialConsiderations))
            {
                var selectedOptions = profileModel.SpecialConsiderations.Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(x => x.Trim());
                foreach (var option in availableSpecialConsiderations)
                {
                    specialConsiderationSelections[option] = selectedOptions.Contains(option);
                }
            }
            await StudentProfileState.SaveStateAsync(profileModel.Username);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading profile");
        }
        finally
        {
            isLoading = false;
            Loader.Hide();
        }
    }

    private static bool AreProfilesEqual(StudentProfileDTO local, StudentProfileDTO remote)
    {
        return local.EducationLevel == remote.EducationLevel &&
                        local.PreferredContentTypes == remote.PreferredContentTypes &&
                        local.SpecialConsiderations == remote.SpecialConsiderations &&
                        local.AdditionalConsiderations == remote.AdditionalConsiderations;
    }

    private async Task OnPreferredContentTypesChanged(string type, bool newValue)
    {
        // Update the dictionary for whichever checkbox changed.
        contentTypeSelections[type] = newValue;

        // Rebuild the comma-separated string in the model.
        profileModel.PreferredContentTypes = string.Join(", ",
            contentTypeSelections
                .Where(kv => kv.Value)
                .Select(kv => kv.Key)
        );

        // Update validation
        editContext.NotifyValidationStateChanged();

        // Save the state to local storage
        await StudentProfileState.SaveStateAsync(profileModel.Username);
        StateHasChanged();
    }

    private async Task OnSpecialConsiderationsChanged(string option, bool newValue)
    {
        // Update the dictionary for whichever checkbox changed.
        specialConsiderationSelections[option] = newValue;

        // Rebuild the SpecialConsiderations property from the dictionary.
        profileModel.SpecialConsiderations = string.Join(", ",
            specialConsiderationSelections
                .Where(kv => kv.Value)
                .Select(kv => kv.Key)
        );

        // Notify the EditContext of the change
        editContext.NotifyValidationStateChanged();

        // Save the state to local storage
        await StudentProfileState.SaveStateAsync(profileModel.Username);
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        // Ensure username is set
        var student = await StudentService.GetCurrentStudentAsync();
        profileModel.Username = student.Username;

        // Ensure that AdditionalConsiderations is not empty.
        // If it is empty, assign it a single whitespace.
        if (string.IsNullOrEmpty(profileModel.AdditionalConsiderations))
        {
            profileModel.AdditionalConsiderations = " ";
        }

        Loader.Show();
        try
        {
            // Update Special Considerations
            var selectedSpecial = specialConsiderationSelections
                .Where(kv => kv.Value)
                .Select(kv => kv.Key)
                .ToList();

            // If Special Consideration "Other" is selected, remove its literal value and simply record "Other"
            if (specialConsiderationSelections.Any(x => x.Value && x.Key.IndexOf("Other", StringComparison.OrdinalIgnoreCase) >= 0))
            {
                selectedSpecial = selectedSpecial
                    .Where(s => s.IndexOf("Other", StringComparison.OrdinalIgnoreCase) < 0)
                    .ToList();
                selectedSpecial.Add("Other");
            }

            profileModel.SpecialConsiderations = string.Join(", ", selectedSpecial);

            await StudentService.UpdateStudentProfileAsync(profileModel.ToUpdateDTO());
            StudentProfileState.ProfileDTO = profileModel.ToUpdateDTO().Profile;
            await StudentProfileState.SaveStateAsync(profileModel.Username);

            if (isNewUser)
            {
				// Clear stored profile data
				await StudentProfileState.ClearProfileStateAsync();
                Navigation.NavigateTo("/generate-course", replace: true);
            }
            else
            {
                // Clear stored profile data
				await StudentProfileState.ClearProfileStateAsync();
				Navigation.NavigateTo("/dashboard", replace: true);
            }

        }
        catch (Exception ex)
        {
            Logger.LogError(ex,"Error saving profile");
        }
        finally
        {
            Loader.Hide();
        }
    }

    private Task ConfirmNavigationAsync(LocationChangingContext context)
    {
        if (LogoutService.IsLoggingOut)
        {
            // Allow navigation if it's a logout
            return Task.CompletedTask;
        }

        if (isNewUser && profileModel.IsProfileIncomplete())
        {
            // Block navigation if profile is incomplete.
            context.PreventNavigation();
        }
        return Task.CompletedTask;
    }

    // Method to build the default prompt(s) based on the current selections
    private string GetDefaultAdditionalPrompt()
    {
        string prefix = "";
        if (!string.IsNullOrEmpty(profileModel.EducationLevel) &&
            profileModel.EducationLevel.IndexOf("Other", StringComparison.OrdinalIgnoreCase) >= 0)
        {
            prefix += $"{educationOtherDefault}\n";
        }
        if (specialConsiderationSelections.Any(x => x.Value && x.Key.IndexOf("Other", StringComparison.OrdinalIgnoreCase) >= 0))
        {
            prefix += $"{specialOtherDefault}\n";
        }
        return prefix;
    }

    public class ProfileModel : IValidatableObject
    {
        public string Username { get; set; }
        public string EducationLevel { get; set; }
        public string PreferredContentTypes { get; set; }
        public string SpecialConsiderations { get; set; }
        public string AdditionalConsiderations { get; set; }

        public bool IsProfileIncomplete() =>
            string.IsNullOrWhiteSpace(EducationLevel) ||
            string.IsNullOrWhiteSpace(PreferredContentTypes);

        // Consolidated custom validation:
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (string.IsNullOrWhiteSpace(EducationLevel))
            {
                yield return new ValidationResult("Education level is required.", new[] { nameof(EducationLevel) });
            }
            if (string.IsNullOrWhiteSpace(PreferredContentTypes))
            {
                yield return new ValidationResult("Preferred content types are required.", new[] { nameof(PreferredContentTypes) });
            }

            // For "Other" selections, if EducationLevel contains "Other" but AdditionalConsiderations is empty:
            if (!string.IsNullOrWhiteSpace(EducationLevel) &&
                EducationLevel.IndexOf("Other", StringComparison.OrdinalIgnoreCase) >= 0)
            {
                if (string.IsNullOrWhiteSpace(AdditionalConsiderations))
                {
                    AdditionalConsiderations = "";
                    yield return new ValidationResult(
                        "Additional Information is required when Education is 'Other'.",
                        new[] { nameof(AdditionalConsiderations) });
                }
            }

            // Similarly, if SpecialConsiderations contains "Other" but AdditionalConsiderations is empty:
            if (!string.IsNullOrWhiteSpace(SpecialConsiderations) &&
                SpecialConsiderations.IndexOf("Other", StringComparison.OrdinalIgnoreCase) >= 0)
            {
                if (string.IsNullOrWhiteSpace(AdditionalConsiderations))
                {
                    AdditionalConsiderations = "";
                    yield return new ValidationResult(
                        "Additional Information is required when Special Consideration is 'Other'.",
                        new[] { nameof(AdditionalConsiderations) });
                }
            }
        }

        

        public UpdateStudentDTO ToUpdateDTO()
        {
            return new UpdateStudentDTO
                {
                
                    Username = this.Username,
                    Profile = new StudentProfileDTO
                    {
                        EducationLevel = this.EducationLevel,
                        PreferredContentTypes = this.PreferredContentTypes,
                        SpecialConsiderations = this.SpecialConsiderations,
                        AdditionalConsiderations = this.AdditionalConsiderations
                    }
                };
        }


    }
}
