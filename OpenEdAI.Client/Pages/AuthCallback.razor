@using System.Text.Json.Serialization
@using System.Text.Json
@using OpenEdAI.Client.Models
@using OpenEdAI.Client.Shared
@using OpenEdAI.Client.Services
@page "/auth-callback"
@inject Services.LoadingService Loader
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS
@inject Services.TokenManager TokenManager
@inject Services.StudentService StudentService
@inject ILogger<AuthCallback> Logger
@inject UserStateService UserStateService


<GlobalLoading /> 

@code {
	private bool _hasExchangedCode = false;
	// Ensures that only one thread or task can enter at a time
	private static readonly SemaphoreSlim _navLock = new SemaphoreSlim(1, 1);

	protected override async Task OnInitializedAsync()
	{
		// Check for an existing, valid token
		var existingToken = await JS.InvokeAsync<string>("localStorage.getItem", "access_token");
		if (!string.IsNullOrWhiteSpace(existingToken) && existingToken != "null" && TokenManager.IsTokenValid(existingToken))
		{
			_hasExchangedCode = true;
			//Logger.LogInformation($"OnInitializedAsync calling DeterminPostAuthNavigation.\nTimestamp:{DateTime.UtcNow.ToString("hh:mm:ss:FFF")}\n\n");
			await DeterminePostAuthNavigation();
			return;
		}

		// Prevent multiple code exchanges
		if (_hasExchangedCode)
		{
			Navigation.NavigateTo("/dashboard", replace: true);
			return;
		}

		Loader.Show();

		var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
		var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

		var code = query.Get("code");

		// If there is no code, clear the URL to avoid duplicate exchanges and redirect to the landing page
		if (string.IsNullOrEmpty(code))
		{
			Navigation.NavigateTo("/", forceLoad: true);
			return;
		}

		try
		{
			var payload = new AuthCodeExchangeRequest { Code = code };
			var payloadJson = JsonSerializer.Serialize(payload);

			var response = await Http.PostAsJsonAsync("auth/exchange", payload);

			if (response.IsSuccessStatusCode)
			{
				// Read the raw JSON response for debugging
				var tokenJson = await response.Content.ReadAsStringAsync();

				// Deserialize using case-insensitive property names
				var token = JsonSerializer.Deserialize<AuthTokenResponse>(
					tokenJson,
					new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
				);

				if (token != null)
				{
					// Clear any old tokens before storing the new ones
					await ClearTokensAsync();

					// Store the access token using the TokenManager
					await TokenManager.SetTokenAsync(token.AccessToken);

					// Store the refresh token separately
					if (!string.IsNullOrWhiteSpace(token.RefreshToken))
					{
						await JS.InvokeVoidAsync("localStorage.setItem", "refresh_token", token.RefreshToken);
					}

					_hasExchangedCode = true;

					// Wait for a second before redirecting to give the JS time to store the tokens
					await Task.Delay(200);
					// Redirect accordingly
					await DeterminePostAuthNavigation();
				}
				else
				{
					Logger.LogWarning("Received null token object.");
					Navigation.NavigateTo("/", forceLoad: false);
				}

			}
			else
			{
				Logger.LogWarning($"[AuthCallback] Token exchange failed. Status: {response.StatusCode}");
				var errorContent = await response.Content.ReadAsStringAsync();
				Navigation.NavigateTo("/", forceLoad: false);
			}
		}
		catch (Exception ex)
		{
			Logger.LogError($"Exception during token exchange: {ex.Message}");
			Navigation.NavigateTo("/", forceLoad: false);
		}
		finally
		{
			Loader.Hide();
		}
	}

	// Determine whether the student has completed the initial setup and navigate accordingly
	private async Task DeterminePostAuthNavigation()
	{
		//Logger.LogInformation($"DeterminePostAuthNavigation started.\nTimestamp:{DateTime.UtcNow.ToString("hh:mm:ss:FFF")}\n\n");

		// Serialize access to the method and skip duplicate calls
		if (!await _navLock.WaitAsync(0))
		{
			Logger.LogWarning("Navigation already in progress. Skipping duplicate call.");
			return;
		}

		try
		{
			// Check if already creating the student
			//Logger.LogInformation($"Checking if isCreating.\nTimestamp:{DateTime.UtcNow.ToString("hh:mm:ss:FFF")}\n\n");
			var creating = await UserStateService.IsCreatingStudentAsync();
			if (creating)
			{
				// Do not retry while a create is in progress
				//Logger.LogInformation($"isCreating = true. Returning.\nTimestamp:{DateTime.UtcNow.ToString("hh:mm:ss:FFF")}\n\n");
				return;
			}

			// Try to retrieve the student data using the StudentService
			var student = await StudentService.GetCurrentStudentAsync();

			if (student == null)
			{
				// Release _navlock
				_navLock.Release();
				Navigation.NavigateTo("/", replace: true);
				return;
			}

			if (!student.HasCompletedSetup && (student.Profile == null || string.IsNullOrWhiteSpace(student.Profile.EducationLevel)))
			{

				await UserStateService.ClearCreatingStudentFlagAsync();
				// Release _navlock
				_navLock.Release();
				Navigation.NavigateTo("/profile", replace: true);
			}
			else if (!student.HasCompletedSetup)
			{
				await UserStateService.ClearCreatingStudentFlagAsync();
				// Release _navlock
				_navLock.Release();
				Navigation.NavigateTo("/generate-course", replace: true);
			}
			else
			{
				await UserStateService.ClearCreatingStudentFlagAsync();
				// Release _navlock
				_navLock.Release();
				Navigation.NavigateTo("/dashboard", replace: true);
			}
		}
		catch (HttpRequestException ex)
		{
			// If the user is authenticated, but the student record doesn't exist (404), create one
			if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
			{
				//Logger.LogInformation($"404 - student not found. Creating one. Setting isCreating = true.\nTimestamp:{DateTime.UtcNow.ToString("hh:mm:ss:FFF")}\n\n");
				// Mark that a new student is being created
				await UserStateService.MarkCreatingStudentAsync();

				try
				{
					//Logger.LogInformation($"Calling POST. \nTimestamp:{DateTime.UtcNow.ToString("hh:mm:ss:FFF")}\n\n");
					// Call POST /api/students to create a new student record
					var response = await Http.PostAsync("api/students", null);

					if (response.IsSuccessStatusCode)
					{
						//Logger.LogInformation($"response.IsSuccessStatusCode = true. Clearing isCreating flag.\nTimestamp:{DateTime.UtcNow.ToString("hh:mm:ss:FFF")}\n\n");

						// Successfully created a new student record
						// Clear the creating state flag
						await UserStateService.ClearCreatingStudentFlagAsync();

						// Release _navlock
						_navLock.Release();

						await Task.Delay(500); // Give the DB a little time to finish

						// Attempt to determine post-auth navigation again
						await DeterminePostAuthNavigation();
					}
					else
					{
						Logger.LogError($"Failed to create student record. Status: {response.StatusCode}");
						await UserStateService.ClearCreatingStudentFlagAsync();
						// Release _navlock
						_navLock.Release();
						Navigation.NavigateTo("/", forceLoad: false);
					}
				}
				catch (Exception createEx)
				{
					Logger.LogError($"Error creating a new student: {createEx.Message}");
					await UserStateService.ClearCreatingStudentFlagAsync();
					// Release _navlock
					_navLock.Release();
					Navigation.NavigateTo("/", replace: true);
				}
			}
			else
			{
				Logger.LogError($"Error during post-authentication navigation: {ex.Message}");
				// Release _navlock
				_navLock.Release();
				Navigation.NavigateTo("/", forceLoad: false);
			}			
		}
		finally
		{
			// This might still run if none of the other early returns happened
			if (_navLock.CurrentCount == 0)
			{
				// Release _navlock
				_navLock.Release();
			}
			Loader.Hide();
		}
	}

	// Helper method to clear old tokens from localStorage
	private async Task ClearTokensAsync()
	{
		await JS.InvokeVoidAsync("localStorage.removeItem", "access_token");
		await JS.InvokeVoidAsync("localStorage.removeItem", "refresh_token");
	}

	public class AuthCodeExchangeRequest
	{
		public string Code { get; set; }
	}
}