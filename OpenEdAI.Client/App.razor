@using Microsoft.AspNetCore.Components.Authorization
@using OpenEdAI.Client.Services
@inject OpenEdAI.Client.Models.AuthConfig Auth
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject StudentService StudentService
@inject NotificationService Notification

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @{
                        var path = Navigation.ToBaseRelativePath(Navigation.Uri);

                        // Set public urls that do not require authentication
                        var publicRoutes = new[] { "", "auth-callback" };
                        // Redirect to login for non-public routes
                        if (!publicRoutes.Contains(path.ToLowerInvariant()))
                        {
                            // Small delay to allow token updates before redirecting
                            _ = Task.Run(async () =>
                            {
                                await Task.Delay(500);
                                // Redirect to login if not authorized
                                Navigation.NavigateTo(Auth.CognitoLoginUrl, forceLoad: true);
                            });
                        }
                    }
                </NotAuthorized>
            </AuthorizeRouteView>

        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>


@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get student status
            var (hasCompletedSetup, hasProfileData) = await StudentService.GetStudentStatusAsync();

            if (!hasCompletedSetup)
            {
                if (hasProfileData)
                {
                    Navigation.NavigateTo("/generate-course", forceLoad: false);
                    Notification.Notify("Please generate your first course to complete your initial setup.");
                }
                else
                {
                    Navigation.NavigateTo("/profile", forceLoad: false);

                    Notification.Notify("Please complete your profile to begin setting up your personalized course.");
                }
            }
        }
		catch (Exception ex)
		{
			Console.WriteLine($"Error checking student status: {ex.Message}");
			
		}
    }

}