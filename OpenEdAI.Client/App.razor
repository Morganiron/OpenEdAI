@using Microsoft.AspNetCore.Components.Authorization
@inject OpenEdAI.Client.Models.AuthConfig Auth
@inject IJSRuntime JS
@inject NavigationManager Navigation

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @{
                        var path = Navigation.ToBaseRelativePath(Navigation.Uri);

                        // Set public urls that do not require authentication
                        var publicRoutes = new[] { "", "auth-callback" };
                        // Redirect to login for non-public routes
                        if (!publicRoutes.Contains(path.ToLowerInvariant()))
                        {
                            // Small delay to allow token updates before redirecting
                            _ = Task.Run(async () =>
                            {
                                await Task.Delay(500);
                                // Redirect to login if not authorized
                                Navigation.NavigateTo(Auth.CognitoLoginUrl, forceLoad: true);
                            });
                        }
                    }
                </NotAuthorized>
            </AuthorizeRouteView>

        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

<!-- Redirect to Cogntio login if there is not a valid token in localStorage -->
@code {
    protected override async Task OnInitializedAsync()
    {
		// var relativePath = Navigation.ToBaseRelativePath(Navigation.Uri);

		// // Allow /auth-callback and /landing pages to load without a token
  //       if (relativePath == "" || relativePath.StartsWith("auth-callback", StringComparison.OrdinalIgnoreCase))
  //       {
  //           return;
  //       }
		// // Otherwise, check for the token in localStorage
  //       var token = await JS.InvokeAsync<string>("localStorage.getItem", "access_token");

  //       Console.WriteLine($"LocalStorage token: {token}");

  //       if (string.IsNullOrWhiteSpace(token) || token.Trim().ToLower() == "null")
  //       {
  //           Console.WriteLine("No token found in localStorage. Redirecting to login.");
  //           // Immediately redirect to the congnito login
  //           Navigation.NavigateTo(Auth.CognitoLoginUrl, forceLoad: true);
  //       }
  //       else
  //       {
  //           Console.WriteLine("Access token found, continuing...");
  //       }
    }

}