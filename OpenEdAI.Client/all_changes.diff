diff --git a/OpenEdAI.Client/Pages/GenerateCourse.razor b/OpenEdAI.Client/Pages/GenerateCourse.razor
index 8f6320a..143b55c 100644
--- a/OpenEdAI.Client/Pages/GenerateCourse.razor
+++ b/OpenEdAI.Client/Pages/GenerateCourse.razor
@@ -14,6 +14,7 @@
 @inject NotificationService Notification
 @inject StudentService StudentService
 @inject ILogger<GenerateCourse> Logger
+@inject UserStateService UserStateService
 
 <!-- Warn about data loss on any navigation -->
 <NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="ConfirmNavigationAsync" />
@@ -24,14 +25,19 @@
 		Welcome to the Course Generator! Based on your preferences, we'll use AI to create a personalized course outline!
 	</p>
 
-	@if (generatedPlan != null)
+	@if (!hasCompletedSetup)
 	{
-		<CoursePlanDisplay Plan="generatedPlan" />
+		<button class="button back-button" @onclick="GoToProfile">Back to profile</button>
+	}
+
+	@if (UserStateService.CoursePlan != null)
+	{
+		<CoursePlanDisplay Plan="UserStateService.CoursePlan" />
 
 		<button class="button send-button" @onclick="SubmitCoursePlan">Choose this course plan</button>
 		<button class="button reset-button" @onclick="ClearCoursePlan">Start Over</button>
 
-		<CoursePlanChat Messages="chatMessages" OnUserMessageSent="HandleUserChatMessage" />
+		<CoursePlanChat Messages="UserStateService.ChatMessages" OnUserMessageSent="HandleUserChatMessage" />
 	}
 	else
 	{
@@ -41,60 +47,53 @@
 
 
 @code {
-	private CoursePlanDTO generatedPlan;
-	private CoursePersonalizationInput lastInput;
-	private List<CoursePlanChat.ChatMessage> chatMessages = new();
-	private bool isLoggingOut = false;
 	private bool hasCompletedSetup = true;
-
-	// Constant strings for local storage keys to persist data
-	private const string PlanStorageKey = "cached_generated_plan";
-	private const string ChatMessagesKey = "cached_chat_messages";
-	private const string InputStorageKey = "cached_course_input";
-
-	// Expiration time in hours (to remove stored items when returning to the page)
-	private const int StorageExpiration = 2;
+	private string currentUsername = string.Empty;
 
 	protected override async Task OnInitializedAsync()
 	{
-		// Find out if this student has finished onboarding
 		try
 		{
-			(hasCompletedSetup, _) = await StudentService.GetStudentStatusAsync();
+			var student = await StudentService.GetCurrentStudentAsync();
+			currentUsername = student?.Username ?? string.Empty;
+
+			var (completed, _) = await StudentService.GetStudentStatusAsync();
+			hasCompletedSetup = completed;
+
+			await UserStateService.LoadCoursePlanAsync(currentUsername);
+			await UserStateService.LoadChatMessagesAsync(currentUsername);
+			await UserStateService.LoadCourseInputAsync(currentUsername);
 		}
 		catch (Exception ex)
 		{
-			Logger.LogWarning($"Generate-Course: Couldn't get student status - assuming completed. {ex}");
+			Logger.LogWarning($"GenerateCourse: Couldn't load initial state. {ex}");
 		}
+	}
 
-		await LoadGeneratedPlanAsync();
-		await LoadChatMessagesAsync();
-
-		// Attempt to restore lastInput as well
-		var cachedInput = await JS.InvokeAsync<string>("localStorage.getItem", InputStorageKey);
-		if (!string.IsNullOrEmpty(cachedInput))
-		{
-			lastInput = JsonSerializer.Deserialize<CoursePersonalizationInput>(cachedInput);
-		}
+	private void GoToProfile()
+	{
+		Navigation.NavigateTo("/profile");
 	}
 
 	private async Task HandleCourseInput(CoursePersonalizationInput input)
 	{
-		lastInput = input;
 		try
 		{
 			Loader.Show();
+			UserStateService.SetLastInput(input);
 
-			var response = await Http.PostAsync("ai/generate-course", JsonContent.Create(input));
+			var response = await Http.PostAsync("ai/generate-coruse", JsonContent.Create(input));
 
 			if (response.IsSuccessStatusCode)
 			{
-				generatedPlan = await response.Content.ReadFromJsonAsync<CoursePlanDTO>();
-				chatMessages.Clear();
+				var plan = await response.Content.ReadFromJsonAsync<CoursePlanDTO>();
+				UserStateService.SetCoursePlan(plan);
+
+				UserStateService.SetChatMessages(new List<CoursePlanChat.ChatMessage>());
 
-				// Save the new course plan and the user input
-				await SaveGeneratedPlanAsync();
-				await JS.InvokeVoidAsync("localStorage.setItem", InputStorageKey, JsonSerializer.Serialize(lastInput));
+				await UserStateService.SaveCoursePlanAsync(currentUsername);
+				await UserStateService.SaveCourseInputAsync(currentUsername);
+				await UserStateService.SaveChatMessagesAsync(currentUsername);
 			}
 			else
 			{
@@ -112,40 +111,13 @@
 		}
 	}
 
-	private async Task ConfirmNavigationAsync(LocationChangingContext context)
-	{
-		if (LogoutService.IsLoggingOut)
-		{
-			// Always allow logout
-			return;
-		}
-
-		// Completed setup and has generated a plan
-		if (generatedPlan != null && hasCompletedSetup)
-		{
-			return;
-		}
-
-		// New user - block navigation
-		if (!hasCompletedSetup && generatedPlan is null)
-		{
-			context.PreventNavigation();
-			await Notification.NotifyAndAwait("Please finish generating your first course before leaving this page.");
-			return;
-		}
-
-		// Everyone Else - show a notification to warn them of losing unsaved data
-		await Notification.NotifyAndAwait("Any information you've entered on this page may be lost when you leave.");
-
-	}
-
 	private async Task HandleUserChatMessage(string userMessage)
 	{
 		try
 		{
 			Loader.Show();
 
-			var serializedPlan = JsonSerializer.Serialize(generatedPlan);
+			var serializedPlan = JsonSerializer.Serialize(UserStateService.CoursePlan);
 
 			var requestPayload = new
 			{
@@ -166,21 +138,21 @@
 
 				if (adjustedPlan != null)
 				{
-					generatedPlan = adjustedPlan;
-					chatMessages.Add(new CoursePlanChat.ChatMessage
+					UserStateService.SetCoursePlan(adjustedPlan);
+					UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage
 						{
 							Text = "Course plan updated based on your request.",
 							IsUser = false
 						});
 
 					// Save updated Plan and ChateMessages to local storage
-					await SaveGeneratedPlanAsync();
-					await SaveChatMessagesAsync();
+					await UserStateService.SaveCoursePlanAsync(currentUsername);
+					await UserStateService.SaveChatMessagesAsync(currentUsername);
 				}
 				else
 				{
 					Logger.LogError("Deserialization returned null.");
-					chatMessages.Add(new CoursePlanChat.ChatMessage
+					UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage
 						{
 							Text = "The adjustment was processed but no valid plan was returned.",
 							IsUser = false
@@ -190,15 +162,15 @@
 			else
 			{
 				var error = await response.Content.ReadAsStringAsync();
-				Logger.LogError("Error from backend:\n", error);
+				Logger.LogError("Error adjusting course:\n", error);
 
-				chatMessages.Add(new CoursePlanChat.ChatMessage { Text = "Error processing your request. Please try again.", IsUser = false });
+				UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage { Text = "Error processing your request. Please try again.", IsUser = false });
 			}
 		}
 		catch (Exception ex)
 		{
 			Logger.LogError($"Exception in HandleUserChatMessage: {ex}");
-			chatMessages.Add(new CoursePlanChat.ChatMessage
+			UserStateService.ChatMessages.Add(new CoursePlanChat.ChatMessage
 				{
 					Text = "An unexpected error occurred while sending your request.",
 					IsUser = false
@@ -217,15 +189,9 @@
 
 		if (shouldClear)
 		{
-			await JS.InvokeVoidAsync("localStorage.removeItem", PlanStorageKey);
-			await JS.InvokeVoidAsync("localStorage.removeItem", ChatMessagesKey);
-			await JS.InvokeVoidAsync("localStorage.removeItem", InputStorageKey);
-
-			// Reset the in-memory state
-			generatedPlan = null;
-			chatMessages.Clear();
-
-			// Trigger a re-render of the current component
+			await UserStateService.ClearCoursePlanAsync();
+			await UserStateService.ClearChatMessagesAsync();
+			await UserStateService.ClearCourseInputAsync();
 			StateHasChanged();
 		}
 	}
@@ -236,20 +202,15 @@
 		try
 		{
 			// If lastinput is null (e.g., page refresh), try to pull it from storage
-			if (lastInput == null)
+			if (UserStateService.LastInput == null)
 			{
-				var cachedInput = await JS.InvokeAsync<string>("localStorage.getItem", InputStorageKey);
-
-				if (!string.IsNullOrEmpty(cachedInput))
-				{
-					lastInput = JsonSerializer.Deserialize<CoursePersonalizationInput>(cachedInput);
-				}
+				await UserStateService.LoadCourseInputAsync(currentUsername);
 			}
 
 			var payload = new SubmitCourseRequest
 				{
-					Plan = generatedPlan,
-					UserInput = lastInput!
+					Plan = UserStateService.CoursePlan!,
+					UserInput = UserStateService.LastInput!
 				};
 
 			var response = await Http.PostAsJsonAsync("ai/submit-course", payload);
@@ -260,8 +221,9 @@
 				await Notification.NotifyAndAwait("Your course is being finalized.\nThe dashboard will refresh in a few minutes when the AI is done working its magic!");
 
 				// Clear the localstorage to no longer persist the input information
-				await JS.InvokeVoidAsync("localStorage.removeItem", PlanStorageKey);
-				await JS.InvokeVoidAsync("localStorage.removeItem", ChatMessagesKey);
+				await UserStateService.ClearCoursePlanAsync();
+				await UserStateService.ClearChatMessagesAsync();
+				await UserStateService.ClearCourseInputAsync();
 
 				// Set a flag in local storage to poll for new courses on the dashboard
 				await JS.InvokeVoidAsync("localStorage.setItem", "pollForNewCourse", "true");
@@ -287,107 +249,38 @@
 			Loader.Hide();
 		}
 	}
-	// Method to save the generated plan to local storage
-	private async Task SaveGeneratedPlanAsync()
-	{
-		if (generatedPlan != null)
-		{
-			var wrapper = new
-			{
-				Data = generatedPlan,
-				Timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
-			};
 
-			// Serialize the generated plan to a JSON string
-			var serialized = JsonSerializer.Serialize(wrapper);
-			await JS.InvokeVoidAsync("localStorage.setItem", PlanStorageKey, serialized);
-		}
-	}
-	// Method to load the generated plan from local storage
-	private async Task LoadGeneratedPlanAsync()
+	private async Task ConfirmNavigationAsync(LocationChangingContext context)
 	{
-		var serialized = await JS.InvokeAsync<string>("localStorage.getItem", PlanStorageKey);
-
-		if (!string.IsNullOrEmpty(serialized))
+		if (LogoutService.IsLoggingOut)
 		{
-			try
-			{
-				var wrapper = JsonSerializer.Deserialize<JsonElement>(serialized);
-				if (wrapper.ValueKind == JsonValueKind.Object &&
-					wrapper.TryGetProperty("Timestamp", out var timestampProp) &&
-					wrapper.TryGetProperty("Data", out var dataProp))
-				{
-					var timestamp = timestampProp.GetInt64();
-					var age = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - timestamp;
-					if (age < StorageExpiration * 60 * 60 * 1000)
-					{
-						generatedPlan = JsonSerializer.Deserialize<CoursePlanDTO>(dataProp.GetRawText(), new JsonSerializerOptions
-							{
-								PropertyNameCaseInsensitive = true
-							});
-						return;
-					}
-				}
-			}
-			catch (Exception ex)
-			{
-				Logger.LogError($"Invalid plan format or exception: {ex.Message}");
-			}
-
-			// If any of the above fails, clear the old storage
-			await JS.InvokeVoidAsync("localStorage.removeItem", PlanStorageKey);
-
+			// Always allow logout
+			return;
 		}
-	}
-	// Method to save chat messages to local storage
-	private async Task SaveChatMessagesAsync()
-	{
-		if (chatMessages != null)
-		{
-			var wrapper = new
-			{
-				Data = chatMessages,
-				Timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
-			};
 
-			// Serialize the generated plan to a JSON string
-			var serialized = JsonSerializer.Serialize(wrapper);
-			await JS.InvokeVoidAsync("localStorage.setItem", ChatMessagesKey, serialized);
+		// Completed setup and has generated a plan
+		if (UserStateService.CoursePlan != null && hasCompletedSetup)
+		{
+			// Allow navigation
+			return;
 		}
-	}
-	// Method to load chat messages from local storage
-	private async Task LoadChatMessagesAsync()
-	{
-		var serialized = await JS.InvokeAsync<string>("localStorage.getItem", ChatMessagesKey);
 
-		if (!string.IsNullOrEmpty(serialized))
+		// New user - block navigation
+		if (!hasCompletedSetup && UserStateService.CoursePlan is null)
 		{
-			try
+			// Only allow navigation to the profile page
+			if (context.TargetLocation.Contains("/profile"))
 			{
-				var wrapper = JsonSerializer.Deserialize<JsonElement>(serialized);
-				if (wrapper.ValueKind == JsonValueKind.Object &&
-					wrapper.TryGetProperty("Timestamp", out var timestampProp) &&
-					wrapper.TryGetProperty("Data", out var dataProp))
-				{
-					var timestamp = timestampProp.GetInt64();
-					var age = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - timestamp;
-					if (age < StorageExpiration * 60 * 60 * 1000)
-					{
-						chatMessages = JsonSerializer.Deserialize<List<CoursePlanChat.ChatMessage>>(dataProp.GetRawText(), new JsonSerializerOptions
-							{
-								PropertyNameCaseInsensitive = true
-							});
-						return;
-					}
-				}
+				return;
 			}
-			catch (Exception ex)
-			{
-				Logger.LogError($"Invalid chat format or exception: {ex.Message}");
-			}
-
-			// Clear legacy or corrupted data
-			await JS.InvokeVoidAsync("localStorage.removeItem", ChatMessagesKey);
+			// Block navigation to any other page
+			context.PreventNavigation();
+			await Notification.NotifyAndAwait("Please finish generating your first course before leaving this page.");
+			return;
 		}
+
+		// Everyone Else - show a notification to warn them of losing unsaved data
+		await Notification.NotifyAndAwait("Any information you've entered on this page may be lost when you leave.");
+
 	}
 }
diff --git a/OpenEdAI.Client/Pages/Profile.razor b/OpenEdAI.Client/Pages/Profile.razor
index de44a02..3a83fb2 100644
--- a/OpenEdAI.Client/Pages/Profile.razor
+++ b/OpenEdAI.Client/Pages/Profile.razor
@@ -10,7 +10,7 @@
 @inject LoadingService Loader
 @inject StudentService StudentService
 @inject LogoutService LogoutService
-@inject StudentProfileState StudentProfileState
+@inject UserStateService StudentProfileState
 @inject IJSRuntime JS
 @inject TokenManager TokenManager
 @inject ILogger<Profile> Logger
@@ -55,7 +55,7 @@
             <!-- Education Level as a dropdown -->
             <div class="mb-3">
                 <label class="form-label">Education Level:</label>
-                <InputSelect @bind-Value="profileModel.EducationLevel" class="form-select" @onchange="async (_) => await StudentProfileState.SaveStateAsync()">
+                <InputSelect @bind-Value="profileModel.EducationLevel" class="form-select" @onchange="async (_) => await StudentProfileState.SaveProfileStateAsync(profileModel.Username)">
                     <option value="">Select your education level</option>
                     @foreach (var level in availableEducationLevels)
                     {
@@ -71,25 +71,9 @@
                 {
                     <div class="form-check">
                         <InputCheckbox class="form-check-input"
-                        Value="@contentTypeSelections[type]"
-                        ValueChanged="@(checkedValue => OnPreferredContentTypesChanged(type, checkedValue))"
+                        Value="@specialConsiderationSelections[type]"
+                        ValueChanged="@(value => OnPreferredContentTypesChanged(type, checkedValue))"
                         ValueExpression="@(() => contentTypeSelections[type])" />
-
-                        <label class="form-check-label">@type</label>
-                    </div>
-                }
-            </div>
-
-            <!-- Special Considerations checkboxes -->
-            <div class="mb-3">
-                <label class="form-label">Special Considerations(optional):</label>
-                @foreach (var option in availableSpecialConsiderations)
-                {
-                    <div class="form-check">
-                        <InputCheckbox class="form-check-input"
-                        Value="@specialConsiderationSelections[option]"
-                        ValueChanged="@(value => OnSpecialConsiderationsChanged(option, value))"
-                        ValueExpression="@(() => specialConsiderationSelections[option])" />
                         <label class="form-check-label">@option</label>
                     </div>
                 }
@@ -121,7 +105,7 @@
                 else
                 {
                     <InputTextArea @bind-Value="profileModel.AdditionalConsiderations" class="form-control"
-                    placeholder="@GetDefaultAdditionalPrompt()" @bind-Value:event="oninput" ValueChanged="async (_) => await StudentProfileState.SaveStateAsync()"/>
+                    placeholder="@GetDefaultAdditionalPrompt()" @bind-Value:event="oninput" ValueChanged="async (_) => await StudentProfileState.SaveStateAsync(profileModel.Username)"/>
                     <button type="button" class="button" @onclick="() => isEditingAdditionalConsiderations = false">Cancel</button>
                 }
             </div>
@@ -134,6 +118,7 @@
 
 @code {
     private bool isLoading = true;
+    private bool isNewUser = false;
     private string errorMessage = string.Empty;
     private ProfileModel profileModel = new ProfileModel();
     private EditContext editContext;
@@ -154,60 +139,36 @@
 
     // Default prompt text for Additional Considerations field
     private readonly string educationOtherDefault = "Education(Other): Please enter your education";
-    private readonly string specialOtherDefault = "Special Considerations(Other): Please enter your special circumstance";
-
-    // Method to build the default prompt(s) based on the current selections
-    private string GetDefaultAdditionalPrompt()
-    {
-        string prefix = "";
-        if (!string.IsNullOrEmpty(profileModel.EducationLevel) &&
-            profileModel.EducationLevel.IndexOf("Other", StringComparison.OrdinalIgnoreCase) >= 0)
-        {
-            prefix += $"{educationOtherDefault}\n";
-        }
-        if (specialConsiderationSelections.Any(x => x.Value && x.Key.IndexOf("Other", StringComparison.OrdinalIgnoreCase) >= 0))
-        {
-            prefix += $"{specialOtherDefault}\n";
-        }
-        return prefix;
-    }
+    private readonly string specialOtherDefault = "Special Considerations(Other): Please enter any special circumstance";
 
     protected override async Task OnInitializedAsync()
     {
         Loader.Show();
         try
         {
-            await StudentProfileState.LoadStateAsync();
+            await StudentProfileState.LoadProfileStateAsync();
 
-            // Fetch the "remote" profile from the API
+            // Fetch the user, status, and "remote" profile from the API
             var student = await StudentService.GetCurrentStudentAsync();
-            var remote = student.Profile ?? new StudentProfileDTO();
+            isNewUser = !student.HasCompletedSetup;
 
-            // If the remote profile is null, set it to a new instance
-            var local = StudentProfileState.ProfileDTO ?? new StudentProfileDTO();
-
-            // Decide if the lcoal DTO actually has any user data
-            bool hasLocalData = 
-                !string.IsNullOrWhiteSpace(local.EducationLevel) ||
-                !string.IsNullOrWhiteSpace(local.PreferredContentTypes) ||
-                !string.IsNullOrWhiteSpace(local.SpecialConsiderations) ||
-                !string.IsNullOrWhiteSpace(local.AdditionalConsiderations);
-
-            if (hasLocalData && !AreProfilesEqual(local, remote))
-            {
-                // Local overrides remote (user has edited but not yet saved)
-                StudentProfileState.ProfileDTO = local;
-            }
-            else
+            // If the saved username doesn't match the current user, clear the cache
+            if (StudentProfileState.Username != student.Username)
             {
-				// Otherwise, use the remote profile
-				StudentProfileState.ProfileDTO = remote;
-				await StudentProfileState.SaveStateAsync();
+                await StudentProfileState.ClearProfileStateAsync();
+                StudentProfileState.ProfileDTO = student.Profile ?? new StudentProfileDTO();
+                await StudentProfileState.SaveStateAsync(student.Username);
             }
+			else if (StudentProfileState.ProfileDTO == null)
+			{
+				// No profile loaded, fallback
+				StudentProfileState.ProfileDTO = student.Profile ?? new StudentProfileDTO();
+				await StudentProfileState.SaveStateAsync(student.Username);
+			}
+
+            // Set the DTO to the most up-to-date profile
+            var dto = StudentProfileState.ProfileDTO;
 
-			// Set the DTO to the most up-to-date profile
-			var dto = StudentProfileState.ProfileDTO;
-            
             // Load profileModel
             profileModel = new ProfileModel
             {
@@ -220,7 +181,7 @@
 
             editContext = new EditContext(profileModel);
 
-			// Initialize the checkboxes
+            // Initialize the checkboxes
             foreach (var type in availableContentTypes)
             {
                 contentTypeSelections[type] = profileModel.PreferredContentTypes?.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Contains(type) ?? false;
@@ -239,7 +200,7 @@
                     specialConsiderationSelections[option] = selectedOptions.Contains(option);
                 }
             }
-            await StudentProfileState.SaveStateAsync();
+            await StudentProfileState.SaveStateAsync(profileModel.Username);
         }
         catch (Exception ex)
         {
@@ -252,13 +213,13 @@
         }
     }
 
-	private static bool AreProfilesEqual(StudentProfileDTO local, StudentProfileDTO remote)
-	{
-		return local.EducationLevel == remote.EducationLevel &&
-						local.PreferredContentTypes == remote.PreferredContentTypes &&
-						local.SpecialConsiderations == remote.SpecialConsiderations &&
-						local.AdditionalConsiderations == remote.AdditionalConsiderations;
-	}
+    private static bool AreProfilesEqual(StudentProfileDTO local, StudentProfileDTO remote)
+    {
+        return local.EducationLevel == remote.EducationLevel &&
+                        local.PreferredContentTypes == remote.PreferredContentTypes &&
+                        local.SpecialConsiderations == remote.SpecialConsiderations &&
+                        local.AdditionalConsiderations == remote.AdditionalConsiderations;
+    }
 
     private async Task OnPreferredContentTypesChanged(string type, bool newValue)
     {
@@ -276,7 +237,7 @@
         editContext.NotifyValidationStateChanged();
 
         // Save the state to local storage
-        await StudentProfileState.SaveStateAsync();
+        await StudentProfileState.SaveStateAsync(profileModel.Username);
         StateHasChanged();
     }
 
@@ -296,7 +257,7 @@
         editContext.NotifyValidationStateChanged();
 
         // Save the state to local storage
-        await StudentProfileState.SaveStateAsync();
+        await StudentProfileState.SaveStateAsync(profileModel.Username);
         StateHasChanged();
     }
 
@@ -335,9 +296,21 @@
 
             await StudentService.UpdateStudentProfileAsync(profileModel.ToUpdateDTO());
             StudentProfileState.ProfileDTO = profileModel.ToUpdateDTO().Profile;
-            await StudentProfileState.SaveStateAsync();
+            await StudentProfileState.SaveStateAsync(profileModel.Username);
+
+            if (isNewUser)
+            {
+				// Clear stored profile data
+				await StudentProfileState.ClearProfileStateAsync();
+                Navigation.NavigateTo("/generate-course", replace: true);
+            }
+            else
+            {
+                // Clear stored profile data
+				await StudentProfileState.ClearProfileStateAsync();
+				Navigation.NavigateTo("/dashboard", replace: true);
+            }
 
-            Navigation.NavigateTo("/generate-course", replace: true);
         }
         catch (Exception ex)
         {
@@ -357,7 +330,7 @@
             return Task.CompletedTask;
         }
 
-        if (profileModel.IsProfileIncomplete())
+        if (isNewUser && profileModel.IsProfileIncomplete())
         {
             // Block navigation if profile is incomplete.
             context.PreventNavigation();
@@ -365,6 +338,22 @@
         return Task.CompletedTask;
     }
 
+    // Method to build the default prompt(s) based on the current selections
+    private string GetDefaultAdditionalPrompt()
+    {
+        string prefix = "";
+        if (!string.IsNullOrEmpty(profileModel.EducationLevel) &&
+            profileModel.EducationLevel.IndexOf("Other", StringComparison.OrdinalIgnoreCase) >= 0)
+        {
+            prefix += $"{educationOtherDefault}\n";
+        }
+        if (specialConsiderationSelections.Any(x => x.Value && x.Key.IndexOf("Other", StringComparison.OrdinalIgnoreCase) >= 0))
+        {
+            prefix += $"{specialOtherDefault}\n";
+        }
+        return prefix;
+    }
+
     public class ProfileModel : IValidatableObject
     {
         public string Username { get; set; }
@@ -416,6 +405,8 @@
             }
         }
 
+        
+
         public UpdateStudentDTO ToUpdateDTO()
         {
             return new UpdateStudentDTO
diff --git a/OpenEdAI.Client/Program.cs b/OpenEdAI.Client/Program.cs
index adcb0ce..48255e3 100644
--- a/OpenEdAI.Client/Program.cs
+++ b/OpenEdAI.Client/Program.cs
@@ -44,7 +44,7 @@ builder.Services.AddScoped<StudentService>();
 builder.Services.AddScoped<CourseGenerationService>();
 builder.Services.AddScoped<LogoutService>();
 builder.Services.AddScoped<CoursePersonalizationState>();
-builder.Services.AddScoped<StudentProfileState>();
+builder.Services.AddScoped<UserStateService>();
 builder.Services.AddScoped<CourseProgressService>();
 builder.Services.AddScoped<LessonService>();
 builder.Services.AddSingleton<NotificationService>();
diff --git a/OpenEdAI.Client/Services/StudentProfileState.cs b/OpenEdAI.Client/Services/StudentProfileState.cs
deleted file mode 100644
index 25286c8..0000000
--- a/OpenEdAI.Client/Services/StudentProfileState.cs
+++ /dev/null
@@ -1,51 +0,0 @@
-﻿using System.Text.Json;
-using Microsoft.JSInterop;
-using OpenEdAI.Client.Models;
-
-namespace OpenEdAI.Client.Services
-{
-    public class StudentProfileState
-    {
-        private const string StorageKey = "student_profile_data";
-        private readonly IJSRuntime _js;
-        private readonly ILogger _logger;
-
-        public StudentProfileDTO ProfileDTO { get; set; } = new();
-
-        public StudentProfileState(IJSRuntime js, ILogger<StudentProfileState> logger)
-        {
-            _js = js;
-            _logger = logger;
-        }
-
-        public async Task LoadStateAsync()
-        {
-            var json = await _js.InvokeAsync<string>("localStorage.getItem", StorageKey);
-            if (!string.IsNullOrEmpty(json))
-            {
-                try
-                {
-                    ProfileDTO = JsonSerializer.Deserialize<StudentProfileDTO>(json) ?? new();
-                }
-                catch (JsonException ex)
-                {
-                    _logger.LogError(ex, "Error deserializing StudentProfileDTO:");
-                    ProfileDTO = new StudentProfileDTO();
-                }
-            }
-        }
-
-        public async Task SaveStateAsync()
-        {
-            var json = JsonSerializer.Serialize(ProfileDTO);
-            await _js.InvokeVoidAsync("localStorage.setItem", StorageKey, json);
-        }
-
-        public async Task ClearStateAsync()
-        {
-            await _js.InvokeVoidAsync("localStorage.removeItem", StorageKey);
-            ProfileDTO = new();
-        }
-
-    }
-}
