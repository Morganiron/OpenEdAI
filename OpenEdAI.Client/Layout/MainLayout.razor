@using Microsoft.AspNetCore.Components.Authorization
@using OpenEdAI.Client.Shared
@using OpenEdAI.Client.Services
@implements IDisposable
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject OpenEdAI.Client.Models.AuthConfig Auth
@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService Notification
@inject LogoutService LogoutService

<!-- Navbar -->
<nav class="navbar">
	<div class="nav-left">
		<NavLink href="/"><i class="fa-solid fa-home" aria-hidden="true"></i></NavLink>
		<NavLink href="/dashboard">Dashboard</NavLink>
		<NavLink href="/profile">Profile</NavLink>
		<NavLink href="generate-course">Create a Course</NavLink>
	</div>
	<div class="nav-right">
		@if (isAuthenticated)
		{
			<NavLink href="#" @onclick="Logout">Logout</NavLink>
		}
		else if (onLandingPage)
		{
			<NavLink href="#" @onclick="Login">Sign In / Sign Up</NavLink>
		}
	</div>
</nav>

<!-- Loading Spinner -->
<GlobalLoading />

@Body

@if(!string.IsNullOrEmpty(message))
{
	<div class="notification-overlay">
		<div class="notification-popup">
			<p>@message</p>

			<!-- Conditional for different types of notifications-->
			@if (isConfirmMode)
			{
				<div class="button-group">
					<button class="button" @onclick="() => Respond(true)">OK</button>
					<button class="button" @onclick="() => Respond(false)">Cancel</button>
				</div>
			}
			else
			{
				<button class="button send-button" @onclick="OnOKClicked">OK</button>
			}

		</div>
	</div>
}


@code {
	private bool isAuthenticated = false;
	private bool onLandingPage = false;
	private string? message;
	private bool isConfirmMode = false;
	private bool isLoggingOut = false;
	private TaskCompletionSource<bool>? promptTcs;
	private AuthenticationStateChangedHandler? authHandler;


	protected override async Task OnInitializedAsync()
	{
		await SetAuthAndRouteState();

		authHandler = async (_) =>
		{
			await SetAuthAndRouteState();
			StateHasChanged();
		};

		AuthStateProvider.AuthenticationStateChanged += authHandler;

		// Subscribe to notifications
		Notification.OnNotify += ShowNotification;
		Notification.OnPrompt += ShowConfirmation;

	}

	public void Dispose()
	{
		Notification.OnNotify -= ShowNotification;
		Notification.OnPrompt -= ShowConfirmation;

		if (authHandler is not null)
			AuthStateProvider.AuthenticationStateChanged -= authHandler;
	}

	protected override void OnInitialized()
	{
		Notification.OnNotify += ShowNotification;
	}

	private void ShowNotification(string msg)
	{
		// Handle the notification message
		message = msg;
		isConfirmMode = false;
		StateHasChanged();
	}

	private async Task<bool> ShowConfirmation(string msg)
	{
		message = msg;
		isConfirmMode = true;
		promptTcs = new TaskCompletionSource<bool>();
		StateHasChanged();
		return await promptTcs.Task;
	}

	private void OnOKClicked()
	{
		// Hide the popup
		message = null;
		StateHasChanged();

		// Signal the back to Notify and await
		Notification.Acknowledge();
	}

	private void Respond(bool confirmed)
	{
		message = null;
		StateHasChanged();
		promptTcs?.SetResult(confirmed);
	}

	private async Task SetAuthAndRouteState()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		// Check if the user is authenticated
		isAuthenticated = authState.User.Identity.IsAuthenticated;


		// Check if the user is on the landing page
		var uri = Navigation.ToBaseRelativePath(Navigation.Uri);
		onLandingPage = string.IsNullOrWhiteSpace(uri);
	}

	private async Task Logout()
	{
		LogoutService.StartLogout();
		// Clear the tokens from localStorage
		await JS.InvokeVoidAsync("localStorage.removeItem", "access_token");
		await JS.InvokeVoidAsync("localStorage.removeItem", "refresh_token");

		// Redirect to the Cognito logout URL
		Navigation.NavigateTo(Auth.CognitoLogoutUrl, forceLoad: true);
	}

	private void Login()
	{
		Navigation.NavigateTo(Auth.CognitoLoginUrl, forceLoad: true);
	}
}